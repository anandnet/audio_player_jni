// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `AudioPlayerJni`
class AudioPlayerJni extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<AudioPlayerJni> $type;

  @jni$_.internal
  AudioPlayerJni.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'AudioPlayerJni');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $AudioPlayerJni$NullableType();
  static const type = $AudioPlayerJni$Type();
  static final _id_new$ = _class.constructorId(
    r'(Landroid/content/Context;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  factory AudioPlayerJni(
    jni$_.JObject context,
  ) {
    final _$context = context.reference;
    return AudioPlayerJni.fromReference(_new$(_class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr, _$context.pointer)
        .reference);
  }

  static final _id_getCurrentState = _class.instanceMethodId(
    r'getCurrentState',
    r'()I',
  );

  static final _getCurrentState = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final int getCurrentState()`
  int getCurrentState() {
    return _getCurrentState(
            reference.pointer, _id_getCurrentState as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getCurrentError = _class.instanceMethodId(
    r'getCurrentError',
    r'()Ljava/lang/String;',
  );

  static final _getCurrentError = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.lang.String getCurrentError()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getCurrentError() {
    return _getCurrentError(
            reference.pointer, _id_getCurrentError as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getCurrentPosition = _class.instanceMethodId(
    r'getCurrentPosition',
    r'()J',
  );

  static final _getCurrentPosition = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final long getCurrentPosition()`
  int getCurrentPosition() {
    return _getCurrentPosition(
            reference.pointer, _id_getCurrentPosition as jni$_.JMethodIDPtr)
        .long;
  }

  static final _id_getDuration = _class.instanceMethodId(
    r'getDuration',
    r'()J',
  );

  static final _getDuration = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final long getDuration()`
  int getDuration() {
    return _getDuration(
            reference.pointer, _id_getDuration as jni$_.JMethodIDPtr)
        .long;
  }

  static final _id_getBufferedPosition = _class.instanceMethodId(
    r'getBufferedPosition',
    r'()J',
  );

  static final _getBufferedPosition = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final long getBufferedPosition()`
  int getBufferedPosition() {
    return _getBufferedPosition(
            reference.pointer, _id_getBufferedPosition as jni$_.JMethodIDPtr)
        .long;
  }

  static final _id_getAllStates = _class.instanceMethodId(
    r'getAllStates',
    r'()Ljava/lang/String;',
  );

  static final _getAllStates = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.lang.String getAllStates()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getAllStates() {
    return _getAllStates(
            reference.pointer, _id_getAllStates as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_setUrl = _class.instanceMethodId(
    r'setUrl',
    r'(Ljava/lang/String;Z)V',
  );

  static final _setUrl = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public final void setUrl(java.lang.String string, boolean z)`
  void setUrl(
    jni$_.JString string,
    bool z,
  ) {
    final _$string = string.reference;
    _setUrl(reference.pointer, _id_setUrl as jni$_.JMethodIDPtr,
            _$string.pointer, z ? 1 : 0)
        .check();
  }

  static final _id_addMediaItem = _class.instanceMethodId(
    r'addMediaItem',
    r'(Ljava/lang/String;Ljava/lang/Integer;)V',
  );

  static final _addMediaItem = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void addMediaItem(java.lang.String string, java.lang.Integer integer)`
  void addMediaItem(
    jni$_.JString string,
    jni$_.JInteger? integer,
  ) {
    final _$string = string.reference;
    final _$integer = integer?.reference ?? jni$_.jNullReference;
    _addMediaItem(reference.pointer, _id_addMediaItem as jni$_.JMethodIDPtr,
            _$string.pointer, _$integer.pointer)
        .check();
  }

  static final _id_addMediaItems = _class.instanceMethodId(
    r'addMediaItems',
    r'(Ljava/lang/String;Ljava/lang/Integer;)V',
  );

  static final _addMediaItems = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void addMediaItems(java.lang.String string, java.lang.Integer integer)`
  void addMediaItems(
    jni$_.JString string,
    jni$_.JInteger? integer,
  ) {
    final _$string = string.reference;
    final _$integer = integer?.reference ?? jni$_.jNullReference;
    _addMediaItems(reference.pointer, _id_addMediaItems as jni$_.JMethodIDPtr,
            _$string.pointer, _$integer.pointer)
        .check();
  }

  static final _id_moveMediaItem = _class.instanceMethodId(
    r'moveMediaItem',
    r'(II)V',
  );

  static final _moveMediaItem = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Int32, jni$_.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int)>();

  /// from: `public final void moveMediaItem(int i, int i1)`
  void moveMediaItem(
    int i,
    int i1,
  ) {
    _moveMediaItem(
            reference.pointer, _id_moveMediaItem as jni$_.JMethodIDPtr, i, i1)
        .check();
  }

  static final _id_removeMediaItem = _class.instanceMethodId(
    r'removeMediaItem',
    r'(I)V',
  );

  static final _removeMediaItem = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void removeMediaItem(int i)`
  void removeMediaItem(
    int i,
  ) {
    _removeMediaItem(
            reference.pointer, _id_removeMediaItem as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_removeMediaItemRange = _class.instanceMethodId(
    r'removeMediaItemRange',
    r'(II)V',
  );

  static final _removeMediaItemRange = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Int32, jni$_.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int)>();

  /// from: `public final void removeMediaItemRange(int i, int i1)`
  void removeMediaItemRange(
    int i,
    int i1,
  ) {
    _removeMediaItemRange(reference.pointer,
            _id_removeMediaItemRange as jni$_.JMethodIDPtr, i, i1)
        .check();
  }

  static final _id_removeAllMediaItems = _class.instanceMethodId(
    r'removeAllMediaItems',
    r'()V',
  );

  static final _removeAllMediaItems = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final void removeAllMediaItems()`
  void removeAllMediaItems() {
    _removeAllMediaItems(
            reference.pointer, _id_removeAllMediaItems as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_getPlayList = _class.instanceMethodId(
    r'getPlayList',
    r'()Ljava/lang/String;',
  );

  static final _getPlayList = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.lang.String getPlayList()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString getPlayList() {
    return _getPlayList(
            reference.pointer, _id_getPlayList as jni$_.JMethodIDPtr)
        .object<jni$_.JString>(const jni$_.JStringType());
  }

  static final _id_play = _class.instanceMethodId(
    r'play',
    r'()V',
  );

  static final _play = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final void play()`
  void play() {
    _play(reference.pointer, _id_play as jni$_.JMethodIDPtr).check();
  }

  static final _id_retryPlay = _class.instanceMethodId(
    r'retryPlay',
    r'()V',
  );

  static final _retryPlay = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final void retryPlay()`
  void retryPlay() {
    _retryPlay(reference.pointer, _id_retryPlay as jni$_.JMethodIDPtr).check();
  }

  static final _id_playPause = _class.instanceMethodId(
    r'playPause',
    r'()V',
  );

  static final _playPause = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final void playPause()`
  void playPause() {
    _playPause(reference.pointer, _id_playPause as jni$_.JMethodIDPtr).check();
  }

  static final _id_pause = _class.instanceMethodId(
    r'pause',
    r'()V',
  );

  static final _pause = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final void pause()`
  void pause() {
    _pause(reference.pointer, _id_pause as jni$_.JMethodIDPtr).check();
  }

  static final _id_skipToPrevious = _class.instanceMethodId(
    r'skipToPrevious',
    r'()V',
  );

  static final _skipToPrevious = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final void skipToPrevious()`
  void skipToPrevious() {
    _skipToPrevious(reference.pointer, _id_skipToPrevious as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_skipToNext = _class.instanceMethodId(
    r'skipToNext',
    r'()V',
  );

  static final _skipToNext = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final void skipToNext()`
  void skipToNext() {
    _skipToNext(reference.pointer, _id_skipToNext as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_seekTo = _class.instanceMethodId(
    r'seekTo',
    r'(JLjava/lang/Integer;)V',
  );

  static final _seekTo = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int64, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void seekTo(long j, java.lang.Integer integer)`
  void seekTo(
    int j,
    jni$_.JInteger? integer,
  ) {
    final _$integer = integer?.reference ?? jni$_.jNullReference;
    _seekTo(reference.pointer, _id_seekTo as jni$_.JMethodIDPtr, j,
            _$integer.pointer)
        .check();
  }

  static final _id_toggleRepeatMode = _class.instanceMethodId(
    r'toggleRepeatMode',
    r'(I)V',
  );

  static final _toggleRepeatMode = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void toggleRepeatMode(int i)`
  void toggleRepeatMode(
    int i,
  ) {
    _toggleRepeatMode(
            reference.pointer, _id_toggleRepeatMode as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_getRepeatMode = _class.instanceMethodId(
    r'getRepeatMode',
    r'()I',
  );

  static final _getRepeatMode = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final int getRepeatMode()`
  int getRepeatMode() {
    return _getRepeatMode(
            reference.pointer, _id_getRepeatMode as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_toggleShuffleMode = _class.instanceMethodId(
    r'toggleShuffleMode',
    r'(Z)V',
  );

  static final _toggleShuffleMode = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void toggleShuffleMode(boolean z)`
  void toggleShuffleMode(
    bool z,
  ) {
    _toggleShuffleMode(reference.pointer,
            _id_toggleShuffleMode as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isShuffleModeEnabled = _class.instanceMethodId(
    r'isShuffleModeEnabled',
    r'()Z',
  );

  static final _isShuffleModeEnabled = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final boolean isShuffleModeEnabled()`
  bool isShuffleModeEnabled() {
    return _isShuffleModeEnabled(
            reference.pointer, _id_isShuffleModeEnabled as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_toggleSkipSilence = _class.instanceMethodId(
    r'toggleSkipSilence',
    r'(Z)V',
  );

  static final _toggleSkipSilence = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void toggleSkipSilence(boolean z)`
  void toggleSkipSilence(
    bool z,
  ) {
    _toggleSkipSilence(reference.pointer,
            _id_toggleSkipSilence as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isSkipSilenceEnabled = _class.instanceMethodId(
    r'isSkipSilenceEnabled',
    r'()Z',
  );

  static final _isSkipSilenceEnabled = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final boolean isSkipSilenceEnabled()`
  bool isSkipSilenceEnabled() {
    return _isSkipSilenceEnabled(
            reference.pointer, _id_isSkipSilenceEnabled as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_getPlayerSessionId = _class.instanceMethodId(
    r'getPlayerSessionId',
    r'()I',
  );

  static final _getPlayerSessionId = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final int getPlayerSessionId()`
  int getPlayerSessionId() {
    return _getPlayerSessionId(
            reference.pointer, _id_getPlayerSessionId as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_stop = _class.instanceMethodId(
    r'stop',
    r'()V',
  );

  static final _stop = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final void stop()`
  void stop() {
    _stop(reference.pointer, _id_stop as jni$_.JMethodIDPtr).check();
  }

  static final _id_release$1 = _class.instanceMethodId(
    r'release',
    r'()V',
  );

  static final _release$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final void release()`
  void release$1() {
    _release$1(reference.pointer, _id_release$1 as jni$_.JMethodIDPtr).check();
  }
}

final class $AudioPlayerJni$NullableType
    extends jni$_.JObjType<AudioPlayerJni?> {
  @jni$_.internal
  const $AudioPlayerJni$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'LAudioPlayerJni;';

  @jni$_.internal
  @core$_.override
  AudioPlayerJni? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : AudioPlayerJni.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AudioPlayerJni?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AudioPlayerJni$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AudioPlayerJni$NullableType) &&
        other is $AudioPlayerJni$NullableType;
  }
}

final class $AudioPlayerJni$Type extends jni$_.JObjType<AudioPlayerJni> {
  @jni$_.internal
  const $AudioPlayerJni$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'LAudioPlayerJni;';

  @jni$_.internal
  @core$_.override
  AudioPlayerJni fromReference(jni$_.JReference reference) =>
      AudioPlayerJni.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AudioPlayerJni?> get nullableType =>
      const $AudioPlayerJni$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AudioPlayerJni$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AudioPlayerJni$Type) &&
        other is $AudioPlayerJni$Type;
  }
}
