// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `androidx.media3.common.MediaItem$AdsConfiguration$Builder`
class MediaItem$AdsConfiguration$Builder extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaItem$AdsConfiguration$Builder> $type;

  @jni$_.internal
  MediaItem$AdsConfiguration$Builder.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/media3/common/MediaItem$AdsConfiguration$Builder');

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $MediaItem$AdsConfiguration$Builder$NullableType();
  static const type = $MediaItem$AdsConfiguration$Builder$Type();
  static final _id_new$ = _class.constructorId(
    r'(Landroid/net/Uri;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaItem$AdsConfiguration$Builder(
    jni$_.JObject? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return MediaItem$AdsConfiguration$Builder.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr,
            _$uri.pointer)
        .reference);
  }

  static final _id_setAdTagUri = _class.instanceMethodId(
    r'setAdTagUri',
    r'(Landroid/net/Uri;)Landroidx/media3/common/MediaItem$AdsConfiguration$Builder;',
  );

  static final _setAdTagUri = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$AdsConfiguration$Builder setAdTagUri(android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$AdsConfiguration$Builder? setAdTagUri(
    jni$_.JObject? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _setAdTagUri(reference.pointer,
            _id_setAdTagUri as jni$_.JMethodIDPtr, _$uri.pointer)
        .object<MediaItem$AdsConfiguration$Builder?>(
            const $MediaItem$AdsConfiguration$Builder$NullableType());
  }

  static final _id_setAdsId = _class.instanceMethodId(
    r'setAdsId',
    r'(Ljava/lang/Object;)Landroidx/media3/common/MediaItem$AdsConfiguration$Builder;',
  );

  static final _setAdsId = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$AdsConfiguration$Builder setAdsId(java.lang.Object object)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$AdsConfiguration$Builder? setAdsId(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _setAdsId(reference.pointer, _id_setAdsId as jni$_.JMethodIDPtr,
            _$object.pointer)
        .object<MediaItem$AdsConfiguration$Builder?>(
            const $MediaItem$AdsConfiguration$Builder$NullableType());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Landroidx/media3/common/MediaItem$AdsConfiguration;',
  );

  static final _build = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public androidx.media3.common.MediaItem$AdsConfiguration build()`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$AdsConfiguration? build() {
    return _build(reference.pointer, _id_build as jni$_.JMethodIDPtr)
        .object<MediaItem$AdsConfiguration?>(
            const $MediaItem$AdsConfiguration$NullableType());
  }
}

final class $MediaItem$AdsConfiguration$Builder$NullableType
    extends jni$_.JObjType<MediaItem$AdsConfiguration$Builder?> {
  @jni$_.internal
  const $MediaItem$AdsConfiguration$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/media3/common/MediaItem$AdsConfiguration$Builder;';

  @jni$_.internal
  @core$_.override
  MediaItem$AdsConfiguration$Builder? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : MediaItem$AdsConfiguration$Builder.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$AdsConfiguration$Builder?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($MediaItem$AdsConfiguration$Builder$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($MediaItem$AdsConfiguration$Builder$NullableType) &&
        other is $MediaItem$AdsConfiguration$Builder$NullableType;
  }
}

final class $MediaItem$AdsConfiguration$Builder$Type
    extends jni$_.JObjType<MediaItem$AdsConfiguration$Builder> {
  @jni$_.internal
  const $MediaItem$AdsConfiguration$Builder$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/media3/common/MediaItem$AdsConfiguration$Builder;';

  @jni$_.internal
  @core$_.override
  MediaItem$AdsConfiguration$Builder fromReference(
          jni$_.JReference reference) =>
      MediaItem$AdsConfiguration$Builder.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$AdsConfiguration$Builder?> get nullableType =>
      const $MediaItem$AdsConfiguration$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$AdsConfiguration$Builder$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$AdsConfiguration$Builder$Type) &&
        other is $MediaItem$AdsConfiguration$Builder$Type;
  }
}

/// from: `androidx.media3.common.MediaItem$AdsConfiguration`
class MediaItem$AdsConfiguration extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaItem$AdsConfiguration> $type;

  @jni$_.internal
  MediaItem$AdsConfiguration.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/media3/common/MediaItem$AdsConfiguration');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MediaItem$AdsConfiguration$NullableType();
  static const type = $MediaItem$AdsConfiguration$Type();
  static final _id_adTagUri = _class.instanceFieldId(
    r'adTagUri',
    r'Landroid/net/Uri;',
  );

  /// from: `public final android.net.Uri adTagUri`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get adTagUri =>
      _id_adTagUri.get(this, const jni$_.JObjectNullableType());

  static final _id_adsId = _class.instanceFieldId(
    r'adsId',
    r'Ljava/lang/Object;',
  );

  /// from: `public final java.lang.Object adsId`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get adsId =>
      _id_adsId.get(this, const jni$_.JObjectNullableType());

  static final _id_buildUpon = _class.instanceMethodId(
    r'buildUpon',
    r'()Landroidx/media3/common/MediaItem$AdsConfiguration$Builder;',
  );

  static final _buildUpon = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public androidx.media3.common.MediaItem$AdsConfiguration$Builder buildUpon()`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$AdsConfiguration$Builder? buildUpon() {
    return _buildUpon(reference.pointer, _id_buildUpon as jni$_.JMethodIDPtr)
        .object<MediaItem$AdsConfiguration$Builder?>(
            const $MediaItem$AdsConfiguration$Builder$NullableType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr,
            _$object.pointer)
        .boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_fromBundle = _class.staticMethodId(
    r'fromBundle',
    r'(Landroid/os/Bundle;)Landroidx/media3/common/MediaItem$AdsConfiguration;',
  );

  static final _fromBundle = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public androidx.media3.common.MediaItem$AdsConfiguration fromBundle(android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  static MediaItem$AdsConfiguration? fromBundle(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _fromBundle(_class.reference.pointer,
            _id_fromBundle as jni$_.JMethodIDPtr, _$bundle.pointer)
        .object<MediaItem$AdsConfiguration?>(
            const $MediaItem$AdsConfiguration$NullableType());
  }

  static final _id_toBundle = _class.instanceMethodId(
    r'toBundle',
    r'()Landroid/os/Bundle;',
  );

  static final _toBundle = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.os.Bundle toBundle()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? toBundle() {
    return _toBundle(reference.pointer, _id_toBundle as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }
}

final class $MediaItem$AdsConfiguration$NullableType
    extends jni$_.JObjType<MediaItem$AdsConfiguration?> {
  @jni$_.internal
  const $MediaItem$AdsConfiguration$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/media3/common/MediaItem$AdsConfiguration;';

  @jni$_.internal
  @core$_.override
  MediaItem$AdsConfiguration? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : MediaItem$AdsConfiguration.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$AdsConfiguration?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$AdsConfiguration$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$AdsConfiguration$NullableType) &&
        other is $MediaItem$AdsConfiguration$NullableType;
  }
}

final class $MediaItem$AdsConfiguration$Type
    extends jni$_.JObjType<MediaItem$AdsConfiguration> {
  @jni$_.internal
  const $MediaItem$AdsConfiguration$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/media3/common/MediaItem$AdsConfiguration;';

  @jni$_.internal
  @core$_.override
  MediaItem$AdsConfiguration fromReference(jni$_.JReference reference) =>
      MediaItem$AdsConfiguration.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$AdsConfiguration?> get nullableType =>
      const $MediaItem$AdsConfiguration$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$AdsConfiguration$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$AdsConfiguration$Type) &&
        other is $MediaItem$AdsConfiguration$Type;
  }
}

/// from: `androidx.media3.common.MediaItem$Builder`
class MediaItem$Builder extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaItem$Builder> $type;

  @jni$_.internal
  MediaItem$Builder.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'androidx/media3/common/MediaItem$Builder');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MediaItem$Builder$NullableType();
  static const type = $MediaItem$Builder$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaItem$Builder() {
    return MediaItem$Builder.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr)
            .reference);
  }

  static final _id_setMediaId = _class.instanceMethodId(
    r'setMediaId',
    r'(Ljava/lang/String;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setMediaId = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setMediaId(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setMediaId(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setMediaId(reference.pointer, _id_setMediaId as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setUri = _class.instanceMethodId(
    r'setUri',
    r'(Ljava/lang/String;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setUri = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setUri(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setUri(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setUri(reference.pointer, _id_setUri as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setUri$1 = _class.instanceMethodId(
    r'setUri',
    r'(Landroid/net/Uri;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setUri$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setUri(android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setUri$1(
    jni$_.JObject? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _setUri$1(reference.pointer, _id_setUri$1 as jni$_.JMethodIDPtr,
            _$uri.pointer)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setMimeType = _class.instanceMethodId(
    r'setMimeType',
    r'(Ljava/lang/String;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setMimeType = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setMimeType(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setMimeType(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setMimeType(reference.pointer,
            _id_setMimeType as jni$_.JMethodIDPtr, _$string.pointer)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setClippingConfiguration = _class.instanceMethodId(
    r'setClippingConfiguration',
    r'(Landroidx/media3/common/MediaItem$ClippingConfiguration;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setClippingConfiguration = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setClippingConfiguration(androidx.media3.common.MediaItem$ClippingConfiguration clippingConfiguration)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setClippingConfiguration(
    MediaItem$ClippingConfiguration? clippingConfiguration,
  ) {
    final _$clippingConfiguration =
        clippingConfiguration?.reference ?? jni$_.jNullReference;
    return _setClippingConfiguration(
            reference.pointer,
            _id_setClippingConfiguration as jni$_.JMethodIDPtr,
            _$clippingConfiguration.pointer)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setClipStartPositionMs = _class.instanceMethodId(
    r'setClipStartPositionMs',
    r'(J)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setClipStartPositionMs = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int64,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setClipStartPositionMs(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setClipStartPositionMs(
    int j,
  ) {
    return _setClipStartPositionMs(reference.pointer,
            _id_setClipStartPositionMs as jni$_.JMethodIDPtr, j)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setClipEndPositionMs = _class.instanceMethodId(
    r'setClipEndPositionMs',
    r'(J)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setClipEndPositionMs = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int64,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setClipEndPositionMs(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setClipEndPositionMs(
    int j,
  ) {
    return _setClipEndPositionMs(reference.pointer,
            _id_setClipEndPositionMs as jni$_.JMethodIDPtr, j)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setClipRelativeToLiveWindow = _class.instanceMethodId(
    r'setClipRelativeToLiveWindow',
    r'(Z)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setClipRelativeToLiveWindow =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setClipRelativeToLiveWindow(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setClipRelativeToLiveWindow(
    bool z,
  ) {
    return _setClipRelativeToLiveWindow(reference.pointer,
            _id_setClipRelativeToLiveWindow as jni$_.JMethodIDPtr, z ? 1 : 0)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setClipRelativeToDefaultPosition = _class.instanceMethodId(
    r'setClipRelativeToDefaultPosition',
    r'(Z)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setClipRelativeToDefaultPosition =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setClipRelativeToDefaultPosition(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setClipRelativeToDefaultPosition(
    bool z,
  ) {
    return _setClipRelativeToDefaultPosition(
            reference.pointer,
            _id_setClipRelativeToDefaultPosition as jni$_.JMethodIDPtr,
            z ? 1 : 0)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setClipStartsAtKeyFrame = _class.instanceMethodId(
    r'setClipStartsAtKeyFrame',
    r'(Z)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setClipStartsAtKeyFrame = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setClipStartsAtKeyFrame(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setClipStartsAtKeyFrame(
    bool z,
  ) {
    return _setClipStartsAtKeyFrame(reference.pointer,
            _id_setClipStartsAtKeyFrame as jni$_.JMethodIDPtr, z ? 1 : 0)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setDrmConfiguration = _class.instanceMethodId(
    r'setDrmConfiguration',
    r'(Landroidx/media3/common/MediaItem$DrmConfiguration;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setDrmConfiguration = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setDrmConfiguration(androidx.media3.common.MediaItem$DrmConfiguration drmConfiguration)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setDrmConfiguration(
    MediaItem$DrmConfiguration? drmConfiguration,
  ) {
    final _$drmConfiguration =
        drmConfiguration?.reference ?? jni$_.jNullReference;
    return _setDrmConfiguration(
            reference.pointer,
            _id_setDrmConfiguration as jni$_.JMethodIDPtr,
            _$drmConfiguration.pointer)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setDrmLicenseUri = _class.instanceMethodId(
    r'setDrmLicenseUri',
    r'(Landroid/net/Uri;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setDrmLicenseUri = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setDrmLicenseUri(android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setDrmLicenseUri(
    jni$_.JObject? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _setDrmLicenseUri(reference.pointer,
            _id_setDrmLicenseUri as jni$_.JMethodIDPtr, _$uri.pointer)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setDrmLicenseUri$1 = _class.instanceMethodId(
    r'setDrmLicenseUri',
    r'(Ljava/lang/String;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setDrmLicenseUri$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setDrmLicenseUri(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setDrmLicenseUri$1(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setDrmLicenseUri$1(reference.pointer,
            _id_setDrmLicenseUri$1 as jni$_.JMethodIDPtr, _$string.pointer)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setDrmLicenseRequestHeaders = _class.instanceMethodId(
    r'setDrmLicenseRequestHeaders',
    r'(Ljava/util/Map;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setDrmLicenseRequestHeaders =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setDrmLicenseRequestHeaders(java.util.Map map)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setDrmLicenseRequestHeaders(
    jni$_.JMap<jni$_.JString?, jni$_.JString?>? map,
  ) {
    final _$map = map?.reference ?? jni$_.jNullReference;
    return _setDrmLicenseRequestHeaders(
            reference.pointer,
            _id_setDrmLicenseRequestHeaders as jni$_.JMethodIDPtr,
            _$map.pointer)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setDrmUuid = _class.instanceMethodId(
    r'setDrmUuid',
    r'(Ljava/util/UUID;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setDrmUuid = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setDrmUuid(java.util.UUID uUID)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setDrmUuid(
    jni$_.JObject? uUID,
  ) {
    final _$uUID = uUID?.reference ?? jni$_.jNullReference;
    return _setDrmUuid(reference.pointer, _id_setDrmUuid as jni$_.JMethodIDPtr,
            _$uUID.pointer)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setDrmMultiSession = _class.instanceMethodId(
    r'setDrmMultiSession',
    r'(Z)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setDrmMultiSession = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setDrmMultiSession(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setDrmMultiSession(
    bool z,
  ) {
    return _setDrmMultiSession(reference.pointer,
            _id_setDrmMultiSession as jni$_.JMethodIDPtr, z ? 1 : 0)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setDrmForceDefaultLicenseUri = _class.instanceMethodId(
    r'setDrmForceDefaultLicenseUri',
    r'(Z)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setDrmForceDefaultLicenseUri =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setDrmForceDefaultLicenseUri(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setDrmForceDefaultLicenseUri(
    bool z,
  ) {
    return _setDrmForceDefaultLicenseUri(reference.pointer,
            _id_setDrmForceDefaultLicenseUri as jni$_.JMethodIDPtr, z ? 1 : 0)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setDrmPlayClearContentWithoutKey = _class.instanceMethodId(
    r'setDrmPlayClearContentWithoutKey',
    r'(Z)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setDrmPlayClearContentWithoutKey =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setDrmPlayClearContentWithoutKey(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setDrmPlayClearContentWithoutKey(
    bool z,
  ) {
    return _setDrmPlayClearContentWithoutKey(
            reference.pointer,
            _id_setDrmPlayClearContentWithoutKey as jni$_.JMethodIDPtr,
            z ? 1 : 0)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setDrmSessionForClearPeriods = _class.instanceMethodId(
    r'setDrmSessionForClearPeriods',
    r'(Z)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setDrmSessionForClearPeriods =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setDrmSessionForClearPeriods(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setDrmSessionForClearPeriods(
    bool z,
  ) {
    return _setDrmSessionForClearPeriods(reference.pointer,
            _id_setDrmSessionForClearPeriods as jni$_.JMethodIDPtr, z ? 1 : 0)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setDrmSessionForClearTypes = _class.instanceMethodId(
    r'setDrmSessionForClearTypes',
    r'(Ljava/util/List;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setDrmSessionForClearTypes =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setDrmSessionForClearTypes(java.util.List list)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setDrmSessionForClearTypes(
    jni$_.JList<jni$_.JInteger?>? list,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    return _setDrmSessionForClearTypes(
            reference.pointer,
            _id_setDrmSessionForClearTypes as jni$_.JMethodIDPtr,
            _$list.pointer)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setDrmKeySetId = _class.instanceMethodId(
    r'setDrmKeySetId',
    r'([B)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setDrmKeySetId = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setDrmKeySetId(byte[] bs)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setDrmKeySetId(
    jni$_.JByteArray? bs,
  ) {
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    return _setDrmKeySetId(reference.pointer,
            _id_setDrmKeySetId as jni$_.JMethodIDPtr, _$bs.pointer)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setStreamKeys = _class.instanceMethodId(
    r'setStreamKeys',
    r'(Ljava/util/List;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setStreamKeys = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setStreamKeys(java.util.List list)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setStreamKeys(
    jni$_.JList<jni$_.JObject?>? list,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    return _setStreamKeys(reference.pointer,
            _id_setStreamKeys as jni$_.JMethodIDPtr, _$list.pointer)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setCustomCacheKey = _class.instanceMethodId(
    r'setCustomCacheKey',
    r'(Ljava/lang/String;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setCustomCacheKey = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setCustomCacheKey(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setCustomCacheKey(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setCustomCacheKey(reference.pointer,
            _id_setCustomCacheKey as jni$_.JMethodIDPtr, _$string.pointer)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setSubtitles = _class.instanceMethodId(
    r'setSubtitles',
    r'(Ljava/util/List;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setSubtitles = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setSubtitles(java.util.List list)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setSubtitles(
    jni$_.JList<MediaItem$Subtitle?>? list,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    return _setSubtitles(reference.pointer,
            _id_setSubtitles as jni$_.JMethodIDPtr, _$list.pointer)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setSubtitleConfigurations = _class.instanceMethodId(
    r'setSubtitleConfigurations',
    r'(Ljava/util/List;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setSubtitleConfigurations = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setSubtitleConfigurations(java.util.List list)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setSubtitleConfigurations(
    jni$_.JList<MediaItem$SubtitleConfiguration?>? list,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    return _setSubtitleConfigurations(reference.pointer,
            _id_setSubtitleConfigurations as jni$_.JMethodIDPtr, _$list.pointer)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setAdsConfiguration = _class.instanceMethodId(
    r'setAdsConfiguration',
    r'(Landroidx/media3/common/MediaItem$AdsConfiguration;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setAdsConfiguration = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setAdsConfiguration(androidx.media3.common.MediaItem$AdsConfiguration adsConfiguration)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setAdsConfiguration(
    MediaItem$AdsConfiguration? adsConfiguration,
  ) {
    final _$adsConfiguration =
        adsConfiguration?.reference ?? jni$_.jNullReference;
    return _setAdsConfiguration(
            reference.pointer,
            _id_setAdsConfiguration as jni$_.JMethodIDPtr,
            _$adsConfiguration.pointer)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setAdTagUri = _class.instanceMethodId(
    r'setAdTagUri',
    r'(Ljava/lang/String;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setAdTagUri = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setAdTagUri(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setAdTagUri(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setAdTagUri(reference.pointer,
            _id_setAdTagUri as jni$_.JMethodIDPtr, _$string.pointer)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setAdTagUri$1 = _class.instanceMethodId(
    r'setAdTagUri',
    r'(Landroid/net/Uri;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setAdTagUri$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setAdTagUri(android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setAdTagUri$1(
    jni$_.JObject? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _setAdTagUri$1(reference.pointer,
            _id_setAdTagUri$1 as jni$_.JMethodIDPtr, _$uri.pointer)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setAdTagUri$2 = _class.instanceMethodId(
    r'setAdTagUri',
    r'(Landroid/net/Uri;Ljava/lang/Object;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setAdTagUri$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setAdTagUri(android.net.Uri uri, java.lang.Object object)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setAdTagUri$2(
    jni$_.JObject? uri,
    jni$_.JObject? object,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _setAdTagUri$2(
            reference.pointer,
            _id_setAdTagUri$2 as jni$_.JMethodIDPtr,
            _$uri.pointer,
            _$object.pointer)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setLiveConfiguration = _class.instanceMethodId(
    r'setLiveConfiguration',
    r'(Landroidx/media3/common/MediaItem$LiveConfiguration;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setLiveConfiguration = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setLiveConfiguration(androidx.media3.common.MediaItem$LiveConfiguration liveConfiguration)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setLiveConfiguration(
    MediaItem$LiveConfiguration? liveConfiguration,
  ) {
    final _$liveConfiguration =
        liveConfiguration?.reference ?? jni$_.jNullReference;
    return _setLiveConfiguration(
            reference.pointer,
            _id_setLiveConfiguration as jni$_.JMethodIDPtr,
            _$liveConfiguration.pointer)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setLiveTargetOffsetMs = _class.instanceMethodId(
    r'setLiveTargetOffsetMs',
    r'(J)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setLiveTargetOffsetMs = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int64,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setLiveTargetOffsetMs(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setLiveTargetOffsetMs(
    int j,
  ) {
    return _setLiveTargetOffsetMs(reference.pointer,
            _id_setLiveTargetOffsetMs as jni$_.JMethodIDPtr, j)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setLiveMinOffsetMs = _class.instanceMethodId(
    r'setLiveMinOffsetMs',
    r'(J)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setLiveMinOffsetMs = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int64,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setLiveMinOffsetMs(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setLiveMinOffsetMs(
    int j,
  ) {
    return _setLiveMinOffsetMs(
            reference.pointer, _id_setLiveMinOffsetMs as jni$_.JMethodIDPtr, j)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setLiveMaxOffsetMs = _class.instanceMethodId(
    r'setLiveMaxOffsetMs',
    r'(J)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setLiveMaxOffsetMs = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int64,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setLiveMaxOffsetMs(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setLiveMaxOffsetMs(
    int j,
  ) {
    return _setLiveMaxOffsetMs(
            reference.pointer, _id_setLiveMaxOffsetMs as jni$_.JMethodIDPtr, j)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setLiveMinPlaybackSpeed = _class.instanceMethodId(
    r'setLiveMinPlaybackSpeed',
    r'(F)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setLiveMinPlaybackSpeed = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_
                      .VarArgs<(jni$_.Double,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, double)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setLiveMinPlaybackSpeed(float f)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setLiveMinPlaybackSpeed(
    double f,
  ) {
    return _setLiveMinPlaybackSpeed(reference.pointer,
            _id_setLiveMinPlaybackSpeed as jni$_.JMethodIDPtr, f)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setLiveMaxPlaybackSpeed = _class.instanceMethodId(
    r'setLiveMaxPlaybackSpeed',
    r'(F)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setLiveMaxPlaybackSpeed = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_
                      .VarArgs<(jni$_.Double,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, double)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setLiveMaxPlaybackSpeed(float f)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setLiveMaxPlaybackSpeed(
    double f,
  ) {
    return _setLiveMaxPlaybackSpeed(reference.pointer,
            _id_setLiveMaxPlaybackSpeed as jni$_.JMethodIDPtr, f)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setTag = _class.instanceMethodId(
    r'setTag',
    r'(Ljava/lang/Object;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setTag = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setTag(java.lang.Object object)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setTag(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _setTag(reference.pointer, _id_setTag as jni$_.JMethodIDPtr,
            _$object.pointer)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setImageDurationMs = _class.instanceMethodId(
    r'setImageDurationMs',
    r'(J)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setImageDurationMs = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int64,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setImageDurationMs(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setImageDurationMs(
    int j,
  ) {
    return _setImageDurationMs(
            reference.pointer, _id_setImageDurationMs as jni$_.JMethodIDPtr, j)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setMediaMetadata = _class.instanceMethodId(
    r'setMediaMetadata',
    r'(Landroidx/media3/common/MediaMetadata;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setMediaMetadata = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setMediaMetadata(androidx.media3.common.MediaMetadata mediaMetadata)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setMediaMetadata(
    jni$_.JObject? mediaMetadata,
  ) {
    final _$mediaMetadata = mediaMetadata?.reference ?? jni$_.jNullReference;
    return _setMediaMetadata(reference.pointer,
            _id_setMediaMetadata as jni$_.JMethodIDPtr, _$mediaMetadata.pointer)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setRequestMetadata = _class.instanceMethodId(
    r'setRequestMetadata',
    r'(Landroidx/media3/common/MediaItem$RequestMetadata;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setRequestMetadata = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setRequestMetadata(androidx.media3.common.MediaItem$RequestMetadata requestMetadata)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setRequestMetadata(
    MediaItem$RequestMetadata? requestMetadata,
  ) {
    final _$requestMetadata =
        requestMetadata?.reference ?? jni$_.jNullReference;
    return _setRequestMetadata(
            reference.pointer,
            _id_setRequestMetadata as jni$_.JMethodIDPtr,
            _$requestMetadata.pointer)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Landroidx/media3/common/MediaItem;',
  );

  static final _build = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public androidx.media3.common.MediaItem build()`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem? build() {
    return _build(reference.pointer, _id_build as jni$_.JMethodIDPtr)
        .object<MediaItem?>(const $MediaItem$NullableType());
  }
}

final class $MediaItem$Builder$NullableType
    extends jni$_.JObjType<MediaItem$Builder?> {
  @jni$_.internal
  const $MediaItem$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$Builder;';

  @jni$_.internal
  @core$_.override
  MediaItem$Builder? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : MediaItem$Builder.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$Builder?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$Builder$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$Builder$NullableType) &&
        other is $MediaItem$Builder$NullableType;
  }
}

final class $MediaItem$Builder$Type extends jni$_.JObjType<MediaItem$Builder> {
  @jni$_.internal
  const $MediaItem$Builder$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$Builder;';

  @jni$_.internal
  @core$_.override
  MediaItem$Builder fromReference(jni$_.JReference reference) =>
      MediaItem$Builder.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$Builder?> get nullableType =>
      const $MediaItem$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$Builder$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$Builder$Type) &&
        other is $MediaItem$Builder$Type;
  }
}

/// from: `androidx.media3.common.MediaItem$ClippingConfiguration$Builder`
class MediaItem$ClippingConfiguration$Builder extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaItem$ClippingConfiguration$Builder> $type;

  @jni$_.internal
  MediaItem$ClippingConfiguration$Builder.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/media3/common/MediaItem$ClippingConfiguration$Builder');

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $MediaItem$ClippingConfiguration$Builder$NullableType();
  static const type = $MediaItem$ClippingConfiguration$Builder$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaItem$ClippingConfiguration$Builder() {
    return MediaItem$ClippingConfiguration$Builder.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr)
            .reference);
  }

  static final _id_setStartPositionMs = _class.instanceMethodId(
    r'setStartPositionMs',
    r'(J)Landroidx/media3/common/MediaItem$ClippingConfiguration$Builder;',
  );

  static final _setStartPositionMs = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int64,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$ClippingConfiguration$Builder setStartPositionMs(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$ClippingConfiguration$Builder? setStartPositionMs(
    int j,
  ) {
    return _setStartPositionMs(
            reference.pointer, _id_setStartPositionMs as jni$_.JMethodIDPtr, j)
        .object<MediaItem$ClippingConfiguration$Builder?>(
            const $MediaItem$ClippingConfiguration$Builder$NullableType());
  }

  static final _id_setStartPositionUs = _class.instanceMethodId(
    r'setStartPositionUs',
    r'(J)Landroidx/media3/common/MediaItem$ClippingConfiguration$Builder;',
  );

  static final _setStartPositionUs = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int64,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$ClippingConfiguration$Builder setStartPositionUs(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$ClippingConfiguration$Builder? setStartPositionUs(
    int j,
  ) {
    return _setStartPositionUs(
            reference.pointer, _id_setStartPositionUs as jni$_.JMethodIDPtr, j)
        .object<MediaItem$ClippingConfiguration$Builder?>(
            const $MediaItem$ClippingConfiguration$Builder$NullableType());
  }

  static final _id_setEndPositionMs = _class.instanceMethodId(
    r'setEndPositionMs',
    r'(J)Landroidx/media3/common/MediaItem$ClippingConfiguration$Builder;',
  );

  static final _setEndPositionMs = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int64,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$ClippingConfiguration$Builder setEndPositionMs(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$ClippingConfiguration$Builder? setEndPositionMs(
    int j,
  ) {
    return _setEndPositionMs(
            reference.pointer, _id_setEndPositionMs as jni$_.JMethodIDPtr, j)
        .object<MediaItem$ClippingConfiguration$Builder?>(
            const $MediaItem$ClippingConfiguration$Builder$NullableType());
  }

  static final _id_setEndPositionUs = _class.instanceMethodId(
    r'setEndPositionUs',
    r'(J)Landroidx/media3/common/MediaItem$ClippingConfiguration$Builder;',
  );

  static final _setEndPositionUs = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int64,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$ClippingConfiguration$Builder setEndPositionUs(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$ClippingConfiguration$Builder? setEndPositionUs(
    int j,
  ) {
    return _setEndPositionUs(
            reference.pointer, _id_setEndPositionUs as jni$_.JMethodIDPtr, j)
        .object<MediaItem$ClippingConfiguration$Builder?>(
            const $MediaItem$ClippingConfiguration$Builder$NullableType());
  }

  static final _id_setRelativeToLiveWindow = _class.instanceMethodId(
    r'setRelativeToLiveWindow',
    r'(Z)Landroidx/media3/common/MediaItem$ClippingConfiguration$Builder;',
  );

  static final _setRelativeToLiveWindow = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$ClippingConfiguration$Builder setRelativeToLiveWindow(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$ClippingConfiguration$Builder? setRelativeToLiveWindow(
    bool z,
  ) {
    return _setRelativeToLiveWindow(reference.pointer,
            _id_setRelativeToLiveWindow as jni$_.JMethodIDPtr, z ? 1 : 0)
        .object<MediaItem$ClippingConfiguration$Builder?>(
            const $MediaItem$ClippingConfiguration$Builder$NullableType());
  }

  static final _id_setRelativeToDefaultPosition = _class.instanceMethodId(
    r'setRelativeToDefaultPosition',
    r'(Z)Landroidx/media3/common/MediaItem$ClippingConfiguration$Builder;',
  );

  static final _setRelativeToDefaultPosition =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$ClippingConfiguration$Builder setRelativeToDefaultPosition(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$ClippingConfiguration$Builder? setRelativeToDefaultPosition(
    bool z,
  ) {
    return _setRelativeToDefaultPosition(reference.pointer,
            _id_setRelativeToDefaultPosition as jni$_.JMethodIDPtr, z ? 1 : 0)
        .object<MediaItem$ClippingConfiguration$Builder?>(
            const $MediaItem$ClippingConfiguration$Builder$NullableType());
  }

  static final _id_setStartsAtKeyFrame = _class.instanceMethodId(
    r'setStartsAtKeyFrame',
    r'(Z)Landroidx/media3/common/MediaItem$ClippingConfiguration$Builder;',
  );

  static final _setStartsAtKeyFrame = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$ClippingConfiguration$Builder setStartsAtKeyFrame(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$ClippingConfiguration$Builder? setStartsAtKeyFrame(
    bool z,
  ) {
    return _setStartsAtKeyFrame(reference.pointer,
            _id_setStartsAtKeyFrame as jni$_.JMethodIDPtr, z ? 1 : 0)
        .object<MediaItem$ClippingConfiguration$Builder?>(
            const $MediaItem$ClippingConfiguration$Builder$NullableType());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Landroidx/media3/common/MediaItem$ClippingConfiguration;',
  );

  static final _build = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public androidx.media3.common.MediaItem$ClippingConfiguration build()`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$ClippingConfiguration? build() {
    return _build(reference.pointer, _id_build as jni$_.JMethodIDPtr)
        .object<MediaItem$ClippingConfiguration?>(
            const $MediaItem$ClippingConfiguration$NullableType());
  }

  static final _id_buildClippingProperties = _class.instanceMethodId(
    r'buildClippingProperties',
    r'()Landroidx/media3/common/MediaItem$ClippingProperties;',
  );

  static final _buildClippingProperties = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public androidx.media3.common.MediaItem$ClippingProperties buildClippingProperties()`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$ClippingProperties? buildClippingProperties() {
    return _buildClippingProperties(reference.pointer,
            _id_buildClippingProperties as jni$_.JMethodIDPtr)
        .object<MediaItem$ClippingProperties?>(
            const $MediaItem$ClippingProperties$NullableType());
  }
}

final class $MediaItem$ClippingConfiguration$Builder$NullableType
    extends jni$_.JObjType<MediaItem$ClippingConfiguration$Builder?> {
  @jni$_.internal
  const $MediaItem$ClippingConfiguration$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/media3/common/MediaItem$ClippingConfiguration$Builder;';

  @jni$_.internal
  @core$_.override
  MediaItem$ClippingConfiguration$Builder? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : MediaItem$ClippingConfiguration$Builder.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$ClippingConfiguration$Builder?> get nullableType =>
      this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($MediaItem$ClippingConfiguration$Builder$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($MediaItem$ClippingConfiguration$Builder$NullableType) &&
        other is $MediaItem$ClippingConfiguration$Builder$NullableType;
  }
}

final class $MediaItem$ClippingConfiguration$Builder$Type
    extends jni$_.JObjType<MediaItem$ClippingConfiguration$Builder> {
  @jni$_.internal
  const $MediaItem$ClippingConfiguration$Builder$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/media3/common/MediaItem$ClippingConfiguration$Builder;';

  @jni$_.internal
  @core$_.override
  MediaItem$ClippingConfiguration$Builder fromReference(
          jni$_.JReference reference) =>
      MediaItem$ClippingConfiguration$Builder.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$ClippingConfiguration$Builder?> get nullableType =>
      const $MediaItem$ClippingConfiguration$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$ClippingConfiguration$Builder$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($MediaItem$ClippingConfiguration$Builder$Type) &&
        other is $MediaItem$ClippingConfiguration$Builder$Type;
  }
}

/// from: `androidx.media3.common.MediaItem$ClippingConfiguration`
class MediaItem$ClippingConfiguration extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaItem$ClippingConfiguration> $type;

  @jni$_.internal
  MediaItem$ClippingConfiguration.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/media3/common/MediaItem$ClippingConfiguration');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MediaItem$ClippingConfiguration$NullableType();
  static const type = $MediaItem$ClippingConfiguration$Type();
  static final _id_UNSET = _class.staticFieldId(
    r'UNSET',
    r'Landroidx/media3/common/MediaItem$ClippingConfiguration;',
  );

  /// from: `static public final androidx.media3.common.MediaItem$ClippingConfiguration UNSET`
  /// The returned object must be released after use, by calling the [release] method.
  static MediaItem$ClippingConfiguration? get UNSET => _id_UNSET.get(
      _class, const $MediaItem$ClippingConfiguration$NullableType());

  static final _id_startPositionMs = _class.instanceFieldId(
    r'startPositionMs',
    r'J',
  );

  /// from: `public final long startPositionMs`
  int get startPositionMs =>
      _id_startPositionMs.get(this, const jni$_.jlongType());

  static final _id_startPositionUs = _class.instanceFieldId(
    r'startPositionUs',
    r'J',
  );

  /// from: `public final long startPositionUs`
  int get startPositionUs =>
      _id_startPositionUs.get(this, const jni$_.jlongType());

  static final _id_endPositionMs = _class.instanceFieldId(
    r'endPositionMs',
    r'J',
  );

  /// from: `public final long endPositionMs`
  int get endPositionMs => _id_endPositionMs.get(this, const jni$_.jlongType());

  static final _id_endPositionUs = _class.instanceFieldId(
    r'endPositionUs',
    r'J',
  );

  /// from: `public final long endPositionUs`
  int get endPositionUs => _id_endPositionUs.get(this, const jni$_.jlongType());

  static final _id_relativeToLiveWindow = _class.instanceFieldId(
    r'relativeToLiveWindow',
    r'Z',
  );

  /// from: `public final boolean relativeToLiveWindow`
  bool get relativeToLiveWindow =>
      _id_relativeToLiveWindow.get(this, const jni$_.jbooleanType());

  static final _id_relativeToDefaultPosition = _class.instanceFieldId(
    r'relativeToDefaultPosition',
    r'Z',
  );

  /// from: `public final boolean relativeToDefaultPosition`
  bool get relativeToDefaultPosition =>
      _id_relativeToDefaultPosition.get(this, const jni$_.jbooleanType());

  static final _id_startsAtKeyFrame = _class.instanceFieldId(
    r'startsAtKeyFrame',
    r'Z',
  );

  /// from: `public final boolean startsAtKeyFrame`
  bool get startsAtKeyFrame =>
      _id_startsAtKeyFrame.get(this, const jni$_.jbooleanType());

  static final _id_buildUpon = _class.instanceMethodId(
    r'buildUpon',
    r'()Landroidx/media3/common/MediaItem$ClippingConfiguration$Builder;',
  );

  static final _buildUpon = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public androidx.media3.common.MediaItem$ClippingConfiguration$Builder buildUpon()`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$ClippingConfiguration$Builder? buildUpon() {
    return _buildUpon(reference.pointer, _id_buildUpon as jni$_.JMethodIDPtr)
        .object<MediaItem$ClippingConfiguration$Builder?>(
            const $MediaItem$ClippingConfiguration$Builder$NullableType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr,
            _$object.pointer)
        .boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_toBundle = _class.instanceMethodId(
    r'toBundle',
    r'()Landroid/os/Bundle;',
  );

  static final _toBundle = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.os.Bundle toBundle()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? toBundle() {
    return _toBundle(reference.pointer, _id_toBundle as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_fromBundle = _class.staticMethodId(
    r'fromBundle',
    r'(Landroid/os/Bundle;)Landroidx/media3/common/MediaItem$ClippingProperties;',
  );

  static final _fromBundle = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public androidx.media3.common.MediaItem$ClippingProperties fromBundle(android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  static MediaItem$ClippingProperties? fromBundle(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _fromBundle(_class.reference.pointer,
            _id_fromBundle as jni$_.JMethodIDPtr, _$bundle.pointer)
        .object<MediaItem$ClippingProperties?>(
            const $MediaItem$ClippingProperties$NullableType());
  }
}

final class $MediaItem$ClippingConfiguration$NullableType
    extends jni$_.JObjType<MediaItem$ClippingConfiguration?> {
  @jni$_.internal
  const $MediaItem$ClippingConfiguration$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/media3/common/MediaItem$ClippingConfiguration;';

  @jni$_.internal
  @core$_.override
  MediaItem$ClippingConfiguration? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : MediaItem$ClippingConfiguration.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$ClippingConfiguration?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$ClippingConfiguration$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($MediaItem$ClippingConfiguration$NullableType) &&
        other is $MediaItem$ClippingConfiguration$NullableType;
  }
}

final class $MediaItem$ClippingConfiguration$Type
    extends jni$_.JObjType<MediaItem$ClippingConfiguration> {
  @jni$_.internal
  const $MediaItem$ClippingConfiguration$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/media3/common/MediaItem$ClippingConfiguration;';

  @jni$_.internal
  @core$_.override
  MediaItem$ClippingConfiguration fromReference(jni$_.JReference reference) =>
      MediaItem$ClippingConfiguration.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$ClippingConfiguration?> get nullableType =>
      const $MediaItem$ClippingConfiguration$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$ClippingConfiguration$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$ClippingConfiguration$Type) &&
        other is $MediaItem$ClippingConfiguration$Type;
  }
}

/// from: `androidx.media3.common.MediaItem$ClippingProperties`
class MediaItem$ClippingProperties extends MediaItem$ClippingConfiguration {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaItem$ClippingProperties> $type;

  @jni$_.internal
  MediaItem$ClippingProperties.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/media3/common/MediaItem$ClippingProperties');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MediaItem$ClippingProperties$NullableType();
  static const type = $MediaItem$ClippingProperties$Type();
  static final _id_UNSET$1 = _class.staticFieldId(
    r'UNSET',
    r'Landroidx/media3/common/MediaItem$ClippingProperties;',
  );

  /// from: `static public final androidx.media3.common.MediaItem$ClippingProperties UNSET`
  /// The returned object must be released after use, by calling the [release] method.
  static MediaItem$ClippingProperties? get UNSET$1 => _id_UNSET$1.get(
      _class, const $MediaItem$ClippingProperties$NullableType());
}

final class $MediaItem$ClippingProperties$NullableType
    extends jni$_.JObjType<MediaItem$ClippingProperties?> {
  @jni$_.internal
  const $MediaItem$ClippingProperties$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/media3/common/MediaItem$ClippingProperties;';

  @jni$_.internal
  @core$_.override
  MediaItem$ClippingProperties? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : MediaItem$ClippingProperties.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType =>
      const $MediaItem$ClippingConfiguration$NullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$ClippingProperties?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($MediaItem$ClippingProperties$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$ClippingProperties$NullableType) &&
        other is $MediaItem$ClippingProperties$NullableType;
  }
}

final class $MediaItem$ClippingProperties$Type
    extends jni$_.JObjType<MediaItem$ClippingProperties> {
  @jni$_.internal
  const $MediaItem$ClippingProperties$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/media3/common/MediaItem$ClippingProperties;';

  @jni$_.internal
  @core$_.override
  MediaItem$ClippingProperties fromReference(jni$_.JReference reference) =>
      MediaItem$ClippingProperties.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType =>
      const $MediaItem$ClippingConfiguration$NullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$ClippingProperties?> get nullableType =>
      const $MediaItem$ClippingProperties$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($MediaItem$ClippingProperties$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$ClippingProperties$Type) &&
        other is $MediaItem$ClippingProperties$Type;
  }
}

/// from: `androidx.media3.common.MediaItem$DrmConfiguration$Builder`
class MediaItem$DrmConfiguration$Builder extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaItem$DrmConfiguration$Builder> $type;

  @jni$_.internal
  MediaItem$DrmConfiguration$Builder.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/media3/common/MediaItem$DrmConfiguration$Builder');

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $MediaItem$DrmConfiguration$Builder$NullableType();
  static const type = $MediaItem$DrmConfiguration$Builder$Type();
  static final _id_new$ = _class.constructorId(
    r'(Ljava/util/UUID;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.util.UUID uUID)`
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaItem$DrmConfiguration$Builder(
    jni$_.JObject? uUID,
  ) {
    final _$uUID = uUID?.reference ?? jni$_.jNullReference;
    return MediaItem$DrmConfiguration$Builder.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr,
            _$uUID.pointer)
        .reference);
  }

  static final _id_setScheme = _class.instanceMethodId(
    r'setScheme',
    r'(Ljava/util/UUID;)Landroidx/media3/common/MediaItem$DrmConfiguration$Builder;',
  );

  static final _setScheme = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$DrmConfiguration$Builder setScheme(java.util.UUID uUID)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$DrmConfiguration$Builder? setScheme(
    jni$_.JObject? uUID,
  ) {
    final _$uUID = uUID?.reference ?? jni$_.jNullReference;
    return _setScheme(reference.pointer, _id_setScheme as jni$_.JMethodIDPtr,
            _$uUID.pointer)
        .object<MediaItem$DrmConfiguration$Builder?>(
            const $MediaItem$DrmConfiguration$Builder$NullableType());
  }

  static final _id_setLicenseUri = _class.instanceMethodId(
    r'setLicenseUri',
    r'(Landroid/net/Uri;)Landroidx/media3/common/MediaItem$DrmConfiguration$Builder;',
  );

  static final _setLicenseUri = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$DrmConfiguration$Builder setLicenseUri(android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$DrmConfiguration$Builder? setLicenseUri(
    jni$_.JObject? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _setLicenseUri(reference.pointer,
            _id_setLicenseUri as jni$_.JMethodIDPtr, _$uri.pointer)
        .object<MediaItem$DrmConfiguration$Builder?>(
            const $MediaItem$DrmConfiguration$Builder$NullableType());
  }

  static final _id_setLicenseUri$1 = _class.instanceMethodId(
    r'setLicenseUri',
    r'(Ljava/lang/String;)Landroidx/media3/common/MediaItem$DrmConfiguration$Builder;',
  );

  static final _setLicenseUri$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$DrmConfiguration$Builder setLicenseUri(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$DrmConfiguration$Builder? setLicenseUri$1(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setLicenseUri$1(reference.pointer,
            _id_setLicenseUri$1 as jni$_.JMethodIDPtr, _$string.pointer)
        .object<MediaItem$DrmConfiguration$Builder?>(
            const $MediaItem$DrmConfiguration$Builder$NullableType());
  }

  static final _id_setLicenseRequestHeaders = _class.instanceMethodId(
    r'setLicenseRequestHeaders',
    r'(Ljava/util/Map;)Landroidx/media3/common/MediaItem$DrmConfiguration$Builder;',
  );

  static final _setLicenseRequestHeaders = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$DrmConfiguration$Builder setLicenseRequestHeaders(java.util.Map map)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$DrmConfiguration$Builder? setLicenseRequestHeaders(
    jni$_.JMap<jni$_.JString?, jni$_.JString?>? map,
  ) {
    final _$map = map?.reference ?? jni$_.jNullReference;
    return _setLicenseRequestHeaders(reference.pointer,
            _id_setLicenseRequestHeaders as jni$_.JMethodIDPtr, _$map.pointer)
        .object<MediaItem$DrmConfiguration$Builder?>(
            const $MediaItem$DrmConfiguration$Builder$NullableType());
  }

  static final _id_setMultiSession = _class.instanceMethodId(
    r'setMultiSession',
    r'(Z)Landroidx/media3/common/MediaItem$DrmConfiguration$Builder;',
  );

  static final _setMultiSession = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$DrmConfiguration$Builder setMultiSession(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$DrmConfiguration$Builder? setMultiSession(
    bool z,
  ) {
    return _setMultiSession(reference.pointer,
            _id_setMultiSession as jni$_.JMethodIDPtr, z ? 1 : 0)
        .object<MediaItem$DrmConfiguration$Builder?>(
            const $MediaItem$DrmConfiguration$Builder$NullableType());
  }

  static final _id_setForceDefaultLicenseUri = _class.instanceMethodId(
    r'setForceDefaultLicenseUri',
    r'(Z)Landroidx/media3/common/MediaItem$DrmConfiguration$Builder;',
  );

  static final _setForceDefaultLicenseUri = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$DrmConfiguration$Builder setForceDefaultLicenseUri(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$DrmConfiguration$Builder? setForceDefaultLicenseUri(
    bool z,
  ) {
    return _setForceDefaultLicenseUri(reference.pointer,
            _id_setForceDefaultLicenseUri as jni$_.JMethodIDPtr, z ? 1 : 0)
        .object<MediaItem$DrmConfiguration$Builder?>(
            const $MediaItem$DrmConfiguration$Builder$NullableType());
  }

  static final _id_setPlayClearContentWithoutKey = _class.instanceMethodId(
    r'setPlayClearContentWithoutKey',
    r'(Z)Landroidx/media3/common/MediaItem$DrmConfiguration$Builder;',
  );

  static final _setPlayClearContentWithoutKey =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$DrmConfiguration$Builder setPlayClearContentWithoutKey(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$DrmConfiguration$Builder? setPlayClearContentWithoutKey(
    bool z,
  ) {
    return _setPlayClearContentWithoutKey(reference.pointer,
            _id_setPlayClearContentWithoutKey as jni$_.JMethodIDPtr, z ? 1 : 0)
        .object<MediaItem$DrmConfiguration$Builder?>(
            const $MediaItem$DrmConfiguration$Builder$NullableType());
  }

  static final _id_forceSessionsForAudioAndVideoTracks =
      _class.instanceMethodId(
    r'forceSessionsForAudioAndVideoTracks',
    r'(Z)Landroidx/media3/common/MediaItem$DrmConfiguration$Builder;',
  );

  static final _forceSessionsForAudioAndVideoTracks =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$DrmConfiguration$Builder forceSessionsForAudioAndVideoTracks(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$DrmConfiguration$Builder? forceSessionsForAudioAndVideoTracks(
    bool z,
  ) {
    return _forceSessionsForAudioAndVideoTracks(
            reference.pointer,
            _id_forceSessionsForAudioAndVideoTracks as jni$_.JMethodIDPtr,
            z ? 1 : 0)
        .object<MediaItem$DrmConfiguration$Builder?>(
            const $MediaItem$DrmConfiguration$Builder$NullableType());
  }

  static final _id_setForceSessionsForAudioAndVideoTracks =
      _class.instanceMethodId(
    r'setForceSessionsForAudioAndVideoTracks',
    r'(Z)Landroidx/media3/common/MediaItem$DrmConfiguration$Builder;',
  );

  static final _setForceSessionsForAudioAndVideoTracks =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$DrmConfiguration$Builder setForceSessionsForAudioAndVideoTracks(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$DrmConfiguration$Builder? setForceSessionsForAudioAndVideoTracks(
    bool z,
  ) {
    return _setForceSessionsForAudioAndVideoTracks(
            reference.pointer,
            _id_setForceSessionsForAudioAndVideoTracks as jni$_.JMethodIDPtr,
            z ? 1 : 0)
        .object<MediaItem$DrmConfiguration$Builder?>(
            const $MediaItem$DrmConfiguration$Builder$NullableType());
  }

  static final _id_setForcedSessionTrackTypes = _class.instanceMethodId(
    r'setForcedSessionTrackTypes',
    r'(Ljava/util/List;)Landroidx/media3/common/MediaItem$DrmConfiguration$Builder;',
  );

  static final _setForcedSessionTrackTypes =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$DrmConfiguration$Builder setForcedSessionTrackTypes(java.util.List list)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$DrmConfiguration$Builder? setForcedSessionTrackTypes(
    jni$_.JList<jni$_.JInteger?>? list,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    return _setForcedSessionTrackTypes(
            reference.pointer,
            _id_setForcedSessionTrackTypes as jni$_.JMethodIDPtr,
            _$list.pointer)
        .object<MediaItem$DrmConfiguration$Builder?>(
            const $MediaItem$DrmConfiguration$Builder$NullableType());
  }

  static final _id_setKeySetId = _class.instanceMethodId(
    r'setKeySetId',
    r'([B)Landroidx/media3/common/MediaItem$DrmConfiguration$Builder;',
  );

  static final _setKeySetId = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$DrmConfiguration$Builder setKeySetId(byte[] bs)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$DrmConfiguration$Builder? setKeySetId(
    jni$_.JByteArray? bs,
  ) {
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    return _setKeySetId(reference.pointer,
            _id_setKeySetId as jni$_.JMethodIDPtr, _$bs.pointer)
        .object<MediaItem$DrmConfiguration$Builder?>(
            const $MediaItem$DrmConfiguration$Builder$NullableType());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Landroidx/media3/common/MediaItem$DrmConfiguration;',
  );

  static final _build = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public androidx.media3.common.MediaItem$DrmConfiguration build()`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$DrmConfiguration? build() {
    return _build(reference.pointer, _id_build as jni$_.JMethodIDPtr)
        .object<MediaItem$DrmConfiguration?>(
            const $MediaItem$DrmConfiguration$NullableType());
  }
}

final class $MediaItem$DrmConfiguration$Builder$NullableType
    extends jni$_.JObjType<MediaItem$DrmConfiguration$Builder?> {
  @jni$_.internal
  const $MediaItem$DrmConfiguration$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/media3/common/MediaItem$DrmConfiguration$Builder;';

  @jni$_.internal
  @core$_.override
  MediaItem$DrmConfiguration$Builder? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : MediaItem$DrmConfiguration$Builder.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$DrmConfiguration$Builder?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($MediaItem$DrmConfiguration$Builder$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($MediaItem$DrmConfiguration$Builder$NullableType) &&
        other is $MediaItem$DrmConfiguration$Builder$NullableType;
  }
}

final class $MediaItem$DrmConfiguration$Builder$Type
    extends jni$_.JObjType<MediaItem$DrmConfiguration$Builder> {
  @jni$_.internal
  const $MediaItem$DrmConfiguration$Builder$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/media3/common/MediaItem$DrmConfiguration$Builder;';

  @jni$_.internal
  @core$_.override
  MediaItem$DrmConfiguration$Builder fromReference(
          jni$_.JReference reference) =>
      MediaItem$DrmConfiguration$Builder.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$DrmConfiguration$Builder?> get nullableType =>
      const $MediaItem$DrmConfiguration$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$DrmConfiguration$Builder$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$DrmConfiguration$Builder$Type) &&
        other is $MediaItem$DrmConfiguration$Builder$Type;
  }
}

/// from: `androidx.media3.common.MediaItem$DrmConfiguration`
class MediaItem$DrmConfiguration extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaItem$DrmConfiguration> $type;

  @jni$_.internal
  MediaItem$DrmConfiguration.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/media3/common/MediaItem$DrmConfiguration');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MediaItem$DrmConfiguration$NullableType();
  static const type = $MediaItem$DrmConfiguration$Type();
  static final _id_scheme = _class.instanceFieldId(
    r'scheme',
    r'Ljava/util/UUID;',
  );

  /// from: `public final java.util.UUID scheme`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get scheme =>
      _id_scheme.get(this, const jni$_.JObjectNullableType());

  static final _id_uuid = _class.instanceFieldId(
    r'uuid',
    r'Ljava/util/UUID;',
  );

  /// from: `public final java.util.UUID uuid`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get uuid =>
      _id_uuid.get(this, const jni$_.JObjectNullableType());

  static final _id_licenseUri = _class.instanceFieldId(
    r'licenseUri',
    r'Landroid/net/Uri;',
  );

  /// from: `public final android.net.Uri licenseUri`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get licenseUri =>
      _id_licenseUri.get(this, const jni$_.JObjectNullableType());

  static final _id_requestHeaders = _class.instanceFieldId(
    r'requestHeaders',
    r'Lcom/google/common/collect/ImmutableMap;',
  );

  /// from: `public final com.google.common.collect.ImmutableMap requestHeaders`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get requestHeaders =>
      _id_requestHeaders.get(this, const jni$_.JObjectNullableType());

  static final _id_licenseRequestHeaders = _class.instanceFieldId(
    r'licenseRequestHeaders',
    r'Lcom/google/common/collect/ImmutableMap;',
  );

  /// from: `public final com.google.common.collect.ImmutableMap licenseRequestHeaders`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get licenseRequestHeaders =>
      _id_licenseRequestHeaders.get(this, const jni$_.JObjectNullableType());

  static final _id_multiSession = _class.instanceFieldId(
    r'multiSession',
    r'Z',
  );

  /// from: `public final boolean multiSession`
  bool get multiSession =>
      _id_multiSession.get(this, const jni$_.jbooleanType());

  static final _id_playClearContentWithoutKey = _class.instanceFieldId(
    r'playClearContentWithoutKey',
    r'Z',
  );

  /// from: `public final boolean playClearContentWithoutKey`
  bool get playClearContentWithoutKey =>
      _id_playClearContentWithoutKey.get(this, const jni$_.jbooleanType());

  static final _id_forceDefaultLicenseUri = _class.instanceFieldId(
    r'forceDefaultLicenseUri',
    r'Z',
  );

  /// from: `public final boolean forceDefaultLicenseUri`
  bool get forceDefaultLicenseUri =>
      _id_forceDefaultLicenseUri.get(this, const jni$_.jbooleanType());

  static final _id_sessionForClearTypes = _class.instanceFieldId(
    r'sessionForClearTypes',
    r'Lcom/google/common/collect/ImmutableList;',
  );

  /// from: `public final com.google.common.collect.ImmutableList sessionForClearTypes`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get sessionForClearTypes =>
      _id_sessionForClearTypes.get(this, const jni$_.JObjectNullableType());

  static final _id_forcedSessionTrackTypes = _class.instanceFieldId(
    r'forcedSessionTrackTypes',
    r'Lcom/google/common/collect/ImmutableList;',
  );

  /// from: `public final com.google.common.collect.ImmutableList forcedSessionTrackTypes`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get forcedSessionTrackTypes =>
      _id_forcedSessionTrackTypes.get(this, const jni$_.JObjectNullableType());

  static final _id_getKeySetId = _class.instanceMethodId(
    r'getKeySetId',
    r'()[B',
  );

  static final _getKeySetId = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public byte[] getKeySetId()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JByteArray? getKeySetId() {
    return _getKeySetId(
            reference.pointer, _id_getKeySetId as jni$_.JMethodIDPtr)
        .object<jni$_.JByteArray?>(const jni$_.JByteArrayNullableType());
  }

  static final _id_buildUpon = _class.instanceMethodId(
    r'buildUpon',
    r'()Landroidx/media3/common/MediaItem$DrmConfiguration$Builder;',
  );

  static final _buildUpon = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public androidx.media3.common.MediaItem$DrmConfiguration$Builder buildUpon()`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$DrmConfiguration$Builder? buildUpon() {
    return _buildUpon(reference.pointer, _id_buildUpon as jni$_.JMethodIDPtr)
        .object<MediaItem$DrmConfiguration$Builder?>(
            const $MediaItem$DrmConfiguration$Builder$NullableType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr,
            _$object.pointer)
        .boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_fromBundle = _class.staticMethodId(
    r'fromBundle',
    r'(Landroid/os/Bundle;)Landroidx/media3/common/MediaItem$DrmConfiguration;',
  );

  static final _fromBundle = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public androidx.media3.common.MediaItem$DrmConfiguration fromBundle(android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  static MediaItem$DrmConfiguration? fromBundle(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _fromBundle(_class.reference.pointer,
            _id_fromBundle as jni$_.JMethodIDPtr, _$bundle.pointer)
        .object<MediaItem$DrmConfiguration?>(
            const $MediaItem$DrmConfiguration$NullableType());
  }

  static final _id_toBundle = _class.instanceMethodId(
    r'toBundle',
    r'()Landroid/os/Bundle;',
  );

  static final _toBundle = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.os.Bundle toBundle()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? toBundle() {
    return _toBundle(reference.pointer, _id_toBundle as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }
}

final class $MediaItem$DrmConfiguration$NullableType
    extends jni$_.JObjType<MediaItem$DrmConfiguration?> {
  @jni$_.internal
  const $MediaItem$DrmConfiguration$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/media3/common/MediaItem$DrmConfiguration;';

  @jni$_.internal
  @core$_.override
  MediaItem$DrmConfiguration? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : MediaItem$DrmConfiguration.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$DrmConfiguration?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$DrmConfiguration$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$DrmConfiguration$NullableType) &&
        other is $MediaItem$DrmConfiguration$NullableType;
  }
}

final class $MediaItem$DrmConfiguration$Type
    extends jni$_.JObjType<MediaItem$DrmConfiguration> {
  @jni$_.internal
  const $MediaItem$DrmConfiguration$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/media3/common/MediaItem$DrmConfiguration;';

  @jni$_.internal
  @core$_.override
  MediaItem$DrmConfiguration fromReference(jni$_.JReference reference) =>
      MediaItem$DrmConfiguration.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$DrmConfiguration?> get nullableType =>
      const $MediaItem$DrmConfiguration$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$DrmConfiguration$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$DrmConfiguration$Type) &&
        other is $MediaItem$DrmConfiguration$Type;
  }
}

/// from: `androidx.media3.common.MediaItem$LiveConfiguration$Builder`
class MediaItem$LiveConfiguration$Builder extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaItem$LiveConfiguration$Builder> $type;

  @jni$_.internal
  MediaItem$LiveConfiguration$Builder.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/media3/common/MediaItem$LiveConfiguration$Builder');

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $MediaItem$LiveConfiguration$Builder$NullableType();
  static const type = $MediaItem$LiveConfiguration$Builder$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaItem$LiveConfiguration$Builder() {
    return MediaItem$LiveConfiguration$Builder.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr)
            .reference);
  }

  static final _id_setTargetOffsetMs = _class.instanceMethodId(
    r'setTargetOffsetMs',
    r'(J)Landroidx/media3/common/MediaItem$LiveConfiguration$Builder;',
  );

  static final _setTargetOffsetMs = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int64,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$LiveConfiguration$Builder setTargetOffsetMs(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$LiveConfiguration$Builder? setTargetOffsetMs(
    int j,
  ) {
    return _setTargetOffsetMs(
            reference.pointer, _id_setTargetOffsetMs as jni$_.JMethodIDPtr, j)
        .object<MediaItem$LiveConfiguration$Builder?>(
            const $MediaItem$LiveConfiguration$Builder$NullableType());
  }

  static final _id_setMinOffsetMs = _class.instanceMethodId(
    r'setMinOffsetMs',
    r'(J)Landroidx/media3/common/MediaItem$LiveConfiguration$Builder;',
  );

  static final _setMinOffsetMs = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int64,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$LiveConfiguration$Builder setMinOffsetMs(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$LiveConfiguration$Builder? setMinOffsetMs(
    int j,
  ) {
    return _setMinOffsetMs(
            reference.pointer, _id_setMinOffsetMs as jni$_.JMethodIDPtr, j)
        .object<MediaItem$LiveConfiguration$Builder?>(
            const $MediaItem$LiveConfiguration$Builder$NullableType());
  }

  static final _id_setMaxOffsetMs = _class.instanceMethodId(
    r'setMaxOffsetMs',
    r'(J)Landroidx/media3/common/MediaItem$LiveConfiguration$Builder;',
  );

  static final _setMaxOffsetMs = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int64,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$LiveConfiguration$Builder setMaxOffsetMs(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$LiveConfiguration$Builder? setMaxOffsetMs(
    int j,
  ) {
    return _setMaxOffsetMs(
            reference.pointer, _id_setMaxOffsetMs as jni$_.JMethodIDPtr, j)
        .object<MediaItem$LiveConfiguration$Builder?>(
            const $MediaItem$LiveConfiguration$Builder$NullableType());
  }

  static final _id_setMinPlaybackSpeed = _class.instanceMethodId(
    r'setMinPlaybackSpeed',
    r'(F)Landroidx/media3/common/MediaItem$LiveConfiguration$Builder;',
  );

  static final _setMinPlaybackSpeed = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_
                      .VarArgs<(jni$_.Double,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, double)>();

  /// from: `public androidx.media3.common.MediaItem$LiveConfiguration$Builder setMinPlaybackSpeed(float f)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$LiveConfiguration$Builder? setMinPlaybackSpeed(
    double f,
  ) {
    return _setMinPlaybackSpeed(
            reference.pointer, _id_setMinPlaybackSpeed as jni$_.JMethodIDPtr, f)
        .object<MediaItem$LiveConfiguration$Builder?>(
            const $MediaItem$LiveConfiguration$Builder$NullableType());
  }

  static final _id_setMaxPlaybackSpeed = _class.instanceMethodId(
    r'setMaxPlaybackSpeed',
    r'(F)Landroidx/media3/common/MediaItem$LiveConfiguration$Builder;',
  );

  static final _setMaxPlaybackSpeed = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_
                      .VarArgs<(jni$_.Double,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, double)>();

  /// from: `public androidx.media3.common.MediaItem$LiveConfiguration$Builder setMaxPlaybackSpeed(float f)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$LiveConfiguration$Builder? setMaxPlaybackSpeed(
    double f,
  ) {
    return _setMaxPlaybackSpeed(
            reference.pointer, _id_setMaxPlaybackSpeed as jni$_.JMethodIDPtr, f)
        .object<MediaItem$LiveConfiguration$Builder?>(
            const $MediaItem$LiveConfiguration$Builder$NullableType());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Landroidx/media3/common/MediaItem$LiveConfiguration;',
  );

  static final _build = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public androidx.media3.common.MediaItem$LiveConfiguration build()`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$LiveConfiguration? build() {
    return _build(reference.pointer, _id_build as jni$_.JMethodIDPtr)
        .object<MediaItem$LiveConfiguration?>(
            const $MediaItem$LiveConfiguration$NullableType());
  }
}

final class $MediaItem$LiveConfiguration$Builder$NullableType
    extends jni$_.JObjType<MediaItem$LiveConfiguration$Builder?> {
  @jni$_.internal
  const $MediaItem$LiveConfiguration$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/media3/common/MediaItem$LiveConfiguration$Builder;';

  @jni$_.internal
  @core$_.override
  MediaItem$LiveConfiguration$Builder? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : MediaItem$LiveConfiguration$Builder.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$LiveConfiguration$Builder?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($MediaItem$LiveConfiguration$Builder$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($MediaItem$LiveConfiguration$Builder$NullableType) &&
        other is $MediaItem$LiveConfiguration$Builder$NullableType;
  }
}

final class $MediaItem$LiveConfiguration$Builder$Type
    extends jni$_.JObjType<MediaItem$LiveConfiguration$Builder> {
  @jni$_.internal
  const $MediaItem$LiveConfiguration$Builder$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/media3/common/MediaItem$LiveConfiguration$Builder;';

  @jni$_.internal
  @core$_.override
  MediaItem$LiveConfiguration$Builder fromReference(
          jni$_.JReference reference) =>
      MediaItem$LiveConfiguration$Builder.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$LiveConfiguration$Builder?> get nullableType =>
      const $MediaItem$LiveConfiguration$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$LiveConfiguration$Builder$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$LiveConfiguration$Builder$Type) &&
        other is $MediaItem$LiveConfiguration$Builder$Type;
  }
}

/// from: `androidx.media3.common.MediaItem$LiveConfiguration`
class MediaItem$LiveConfiguration extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaItem$LiveConfiguration> $type;

  @jni$_.internal
  MediaItem$LiveConfiguration.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/media3/common/MediaItem$LiveConfiguration');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MediaItem$LiveConfiguration$NullableType();
  static const type = $MediaItem$LiveConfiguration$Type();
  static final _id_UNSET = _class.staticFieldId(
    r'UNSET',
    r'Landroidx/media3/common/MediaItem$LiveConfiguration;',
  );

  /// from: `static public final androidx.media3.common.MediaItem$LiveConfiguration UNSET`
  /// The returned object must be released after use, by calling the [release] method.
  static MediaItem$LiveConfiguration? get UNSET =>
      _id_UNSET.get(_class, const $MediaItem$LiveConfiguration$NullableType());

  static final _id_targetOffsetMs = _class.instanceFieldId(
    r'targetOffsetMs',
    r'J',
  );

  /// from: `public final long targetOffsetMs`
  int get targetOffsetMs =>
      _id_targetOffsetMs.get(this, const jni$_.jlongType());

  static final _id_minOffsetMs = _class.instanceFieldId(
    r'minOffsetMs',
    r'J',
  );

  /// from: `public final long minOffsetMs`
  int get minOffsetMs => _id_minOffsetMs.get(this, const jni$_.jlongType());

  static final _id_maxOffsetMs = _class.instanceFieldId(
    r'maxOffsetMs',
    r'J',
  );

  /// from: `public final long maxOffsetMs`
  int get maxOffsetMs => _id_maxOffsetMs.get(this, const jni$_.jlongType());

  static final _id_minPlaybackSpeed = _class.instanceFieldId(
    r'minPlaybackSpeed',
    r'F',
  );

  /// from: `public final float minPlaybackSpeed`
  double get minPlaybackSpeed =>
      _id_minPlaybackSpeed.get(this, const jni$_.jfloatType());

  static final _id_maxPlaybackSpeed = _class.instanceFieldId(
    r'maxPlaybackSpeed',
    r'F',
  );

  /// from: `public final float maxPlaybackSpeed`
  double get maxPlaybackSpeed =>
      _id_maxPlaybackSpeed.get(this, const jni$_.jfloatType());

  static final _id_new$ = _class.constructorId(
    r'(JJJFF)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Int64,
                        jni$_.Int64,
                        jni$_.Int64,
                        jni$_.Double,
                        jni$_.Double
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, int, int, double, double)>();

  /// from: `public void <init>(long j, long j1, long j2, float f, float f1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaItem$LiveConfiguration(
    int j,
    int j1,
    int j2,
    double f,
    double f1,
  ) {
    return MediaItem$LiveConfiguration.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr,
            j,
            j1,
            j2,
            f,
            f1)
        .reference);
  }

  static final _id_buildUpon = _class.instanceMethodId(
    r'buildUpon',
    r'()Landroidx/media3/common/MediaItem$LiveConfiguration$Builder;',
  );

  static final _buildUpon = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public androidx.media3.common.MediaItem$LiveConfiguration$Builder buildUpon()`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$LiveConfiguration$Builder? buildUpon() {
    return _buildUpon(reference.pointer, _id_buildUpon as jni$_.JMethodIDPtr)
        .object<MediaItem$LiveConfiguration$Builder?>(
            const $MediaItem$LiveConfiguration$Builder$NullableType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr,
            _$object.pointer)
        .boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_toBundle = _class.instanceMethodId(
    r'toBundle',
    r'()Landroid/os/Bundle;',
  );

  static final _toBundle = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.os.Bundle toBundle()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? toBundle() {
    return _toBundle(reference.pointer, _id_toBundle as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_fromBundle = _class.staticMethodId(
    r'fromBundle',
    r'(Landroid/os/Bundle;)Landroidx/media3/common/MediaItem$LiveConfiguration;',
  );

  static final _fromBundle = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public androidx.media3.common.MediaItem$LiveConfiguration fromBundle(android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  static MediaItem$LiveConfiguration? fromBundle(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _fromBundle(_class.reference.pointer,
            _id_fromBundle as jni$_.JMethodIDPtr, _$bundle.pointer)
        .object<MediaItem$LiveConfiguration?>(
            const $MediaItem$LiveConfiguration$NullableType());
  }
}

final class $MediaItem$LiveConfiguration$NullableType
    extends jni$_.JObjType<MediaItem$LiveConfiguration?> {
  @jni$_.internal
  const $MediaItem$LiveConfiguration$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/media3/common/MediaItem$LiveConfiguration;';

  @jni$_.internal
  @core$_.override
  MediaItem$LiveConfiguration? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : MediaItem$LiveConfiguration.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$LiveConfiguration?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$LiveConfiguration$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$LiveConfiguration$NullableType) &&
        other is $MediaItem$LiveConfiguration$NullableType;
  }
}

final class $MediaItem$LiveConfiguration$Type
    extends jni$_.JObjType<MediaItem$LiveConfiguration> {
  @jni$_.internal
  const $MediaItem$LiveConfiguration$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/media3/common/MediaItem$LiveConfiguration;';

  @jni$_.internal
  @core$_.override
  MediaItem$LiveConfiguration fromReference(jni$_.JReference reference) =>
      MediaItem$LiveConfiguration.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$LiveConfiguration?> get nullableType =>
      const $MediaItem$LiveConfiguration$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$LiveConfiguration$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$LiveConfiguration$Type) &&
        other is $MediaItem$LiveConfiguration$Type;
  }
}

/// from: `androidx.media3.common.MediaItem$LocalConfiguration`
class MediaItem$LocalConfiguration extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaItem$LocalConfiguration> $type;

  @jni$_.internal
  MediaItem$LocalConfiguration.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/media3/common/MediaItem$LocalConfiguration');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MediaItem$LocalConfiguration$NullableType();
  static const type = $MediaItem$LocalConfiguration$Type();
  static final _id_uri = _class.instanceFieldId(
    r'uri',
    r'Landroid/net/Uri;',
  );

  /// from: `public final android.net.Uri uri`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get uri =>
      _id_uri.get(this, const jni$_.JObjectNullableType());

  static final _id_mimeType = _class.instanceFieldId(
    r'mimeType',
    r'Ljava/lang/String;',
  );

  /// from: `public final java.lang.String mimeType`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? get mimeType =>
      _id_mimeType.get(this, const jni$_.JStringNullableType());

  static final _id_drmConfiguration = _class.instanceFieldId(
    r'drmConfiguration',
    r'Landroidx/media3/common/MediaItem$DrmConfiguration;',
  );

  /// from: `public final androidx.media3.common.MediaItem$DrmConfiguration drmConfiguration`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$DrmConfiguration? get drmConfiguration => _id_drmConfiguration.get(
      this, const $MediaItem$DrmConfiguration$NullableType());

  static final _id_adsConfiguration = _class.instanceFieldId(
    r'adsConfiguration',
    r'Landroidx/media3/common/MediaItem$AdsConfiguration;',
  );

  /// from: `public final androidx.media3.common.MediaItem$AdsConfiguration adsConfiguration`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$AdsConfiguration? get adsConfiguration => _id_adsConfiguration.get(
      this, const $MediaItem$AdsConfiguration$NullableType());

  static final _id_streamKeys = _class.instanceFieldId(
    r'streamKeys',
    r'Ljava/util/List;',
  );

  /// from: `public final java.util.List streamKeys`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JList<jni$_.JObject?>? get streamKeys => _id_streamKeys.get(
      this,
      const jni$_.JListNullableType<jni$_.JObject?>(
          jni$_.JObjectNullableType()));

  static final _id_customCacheKey = _class.instanceFieldId(
    r'customCacheKey',
    r'Ljava/lang/String;',
  );

  /// from: `public final java.lang.String customCacheKey`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? get customCacheKey =>
      _id_customCacheKey.get(this, const jni$_.JStringNullableType());

  static final _id_subtitleConfigurations = _class.instanceFieldId(
    r'subtitleConfigurations',
    r'Lcom/google/common/collect/ImmutableList;',
  );

  /// from: `public final com.google.common.collect.ImmutableList subtitleConfigurations`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get subtitleConfigurations =>
      _id_subtitleConfigurations.get(this, const jni$_.JObjectNullableType());

  static final _id_subtitles = _class.instanceFieldId(
    r'subtitles',
    r'Ljava/util/List;',
  );

  /// from: `public final java.util.List subtitles`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JList<MediaItem$Subtitle?>? get subtitles => _id_subtitles.get(
      this,
      const jni$_.JListNullableType<MediaItem$Subtitle?>(
          $MediaItem$Subtitle$NullableType()));

  static final _id_tag = _class.instanceFieldId(
    r'tag',
    r'Ljava/lang/Object;',
  );

  /// from: `public final java.lang.Object tag`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get tag =>
      _id_tag.get(this, const jni$_.JObjectNullableType());

  static final _id_imageDurationMs = _class.instanceFieldId(
    r'imageDurationMs',
    r'J',
  );

  /// from: `public final long imageDurationMs`
  int get imageDurationMs =>
      _id_imageDurationMs.get(this, const jni$_.jlongType());

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr,
            _$object.pointer)
        .boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_toBundle = _class.instanceMethodId(
    r'toBundle',
    r'()Landroid/os/Bundle;',
  );

  static final _toBundle = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.os.Bundle toBundle()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? toBundle() {
    return _toBundle(reference.pointer, _id_toBundle as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_fromBundle = _class.staticMethodId(
    r'fromBundle',
    r'(Landroid/os/Bundle;)Landroidx/media3/common/MediaItem$LocalConfiguration;',
  );

  static final _fromBundle = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public androidx.media3.common.MediaItem$LocalConfiguration fromBundle(android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  static MediaItem$LocalConfiguration? fromBundle(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _fromBundle(_class.reference.pointer,
            _id_fromBundle as jni$_.JMethodIDPtr, _$bundle.pointer)
        .object<MediaItem$LocalConfiguration?>(
            const $MediaItem$LocalConfiguration$NullableType());
  }
}

final class $MediaItem$LocalConfiguration$NullableType
    extends jni$_.JObjType<MediaItem$LocalConfiguration?> {
  @jni$_.internal
  const $MediaItem$LocalConfiguration$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/media3/common/MediaItem$LocalConfiguration;';

  @jni$_.internal
  @core$_.override
  MediaItem$LocalConfiguration? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : MediaItem$LocalConfiguration.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$LocalConfiguration?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$LocalConfiguration$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$LocalConfiguration$NullableType) &&
        other is $MediaItem$LocalConfiguration$NullableType;
  }
}

final class $MediaItem$LocalConfiguration$Type
    extends jni$_.JObjType<MediaItem$LocalConfiguration> {
  @jni$_.internal
  const $MediaItem$LocalConfiguration$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/media3/common/MediaItem$LocalConfiguration;';

  @jni$_.internal
  @core$_.override
  MediaItem$LocalConfiguration fromReference(jni$_.JReference reference) =>
      MediaItem$LocalConfiguration.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$LocalConfiguration?> get nullableType =>
      const $MediaItem$LocalConfiguration$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$LocalConfiguration$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$LocalConfiguration$Type) &&
        other is $MediaItem$LocalConfiguration$Type;
  }
}

/// from: `androidx.media3.common.MediaItem$RequestMetadata$Builder`
class MediaItem$RequestMetadata$Builder extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaItem$RequestMetadata$Builder> $type;

  @jni$_.internal
  MediaItem$RequestMetadata$Builder.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/media3/common/MediaItem$RequestMetadata$Builder');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MediaItem$RequestMetadata$Builder$NullableType();
  static const type = $MediaItem$RequestMetadata$Builder$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaItem$RequestMetadata$Builder() {
    return MediaItem$RequestMetadata$Builder.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr)
            .reference);
  }

  static final _id_setMediaUri = _class.instanceMethodId(
    r'setMediaUri',
    r'(Landroid/net/Uri;)Landroidx/media3/common/MediaItem$RequestMetadata$Builder;',
  );

  static final _setMediaUri = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$RequestMetadata$Builder setMediaUri(android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$RequestMetadata$Builder? setMediaUri(
    jni$_.JObject? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _setMediaUri(reference.pointer,
            _id_setMediaUri as jni$_.JMethodIDPtr, _$uri.pointer)
        .object<MediaItem$RequestMetadata$Builder?>(
            const $MediaItem$RequestMetadata$Builder$NullableType());
  }

  static final _id_setSearchQuery = _class.instanceMethodId(
    r'setSearchQuery',
    r'(Ljava/lang/String;)Landroidx/media3/common/MediaItem$RequestMetadata$Builder;',
  );

  static final _setSearchQuery = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$RequestMetadata$Builder setSearchQuery(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$RequestMetadata$Builder? setSearchQuery(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setSearchQuery(reference.pointer,
            _id_setSearchQuery as jni$_.JMethodIDPtr, _$string.pointer)
        .object<MediaItem$RequestMetadata$Builder?>(
            const $MediaItem$RequestMetadata$Builder$NullableType());
  }

  static final _id_setExtras = _class.instanceMethodId(
    r'setExtras',
    r'(Landroid/os/Bundle;)Landroidx/media3/common/MediaItem$RequestMetadata$Builder;',
  );

  static final _setExtras = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$RequestMetadata$Builder setExtras(android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$RequestMetadata$Builder? setExtras(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _setExtras(reference.pointer, _id_setExtras as jni$_.JMethodIDPtr,
            _$bundle.pointer)
        .object<MediaItem$RequestMetadata$Builder?>(
            const $MediaItem$RequestMetadata$Builder$NullableType());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Landroidx/media3/common/MediaItem$RequestMetadata;',
  );

  static final _build = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public androidx.media3.common.MediaItem$RequestMetadata build()`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$RequestMetadata? build() {
    return _build(reference.pointer, _id_build as jni$_.JMethodIDPtr)
        .object<MediaItem$RequestMetadata?>(
            const $MediaItem$RequestMetadata$NullableType());
  }
}

final class $MediaItem$RequestMetadata$Builder$NullableType
    extends jni$_.JObjType<MediaItem$RequestMetadata$Builder?> {
  @jni$_.internal
  const $MediaItem$RequestMetadata$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/media3/common/MediaItem$RequestMetadata$Builder;';

  @jni$_.internal
  @core$_.override
  MediaItem$RequestMetadata$Builder? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : MediaItem$RequestMetadata$Builder.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$RequestMetadata$Builder?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($MediaItem$RequestMetadata$Builder$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($MediaItem$RequestMetadata$Builder$NullableType) &&
        other is $MediaItem$RequestMetadata$Builder$NullableType;
  }
}

final class $MediaItem$RequestMetadata$Builder$Type
    extends jni$_.JObjType<MediaItem$RequestMetadata$Builder> {
  @jni$_.internal
  const $MediaItem$RequestMetadata$Builder$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/media3/common/MediaItem$RequestMetadata$Builder;';

  @jni$_.internal
  @core$_.override
  MediaItem$RequestMetadata$Builder fromReference(jni$_.JReference reference) =>
      MediaItem$RequestMetadata$Builder.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$RequestMetadata$Builder?> get nullableType =>
      const $MediaItem$RequestMetadata$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$RequestMetadata$Builder$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$RequestMetadata$Builder$Type) &&
        other is $MediaItem$RequestMetadata$Builder$Type;
  }
}

/// from: `androidx.media3.common.MediaItem$RequestMetadata`
class MediaItem$RequestMetadata extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaItem$RequestMetadata> $type;

  @jni$_.internal
  MediaItem$RequestMetadata.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'androidx/media3/common/MediaItem$RequestMetadata');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MediaItem$RequestMetadata$NullableType();
  static const type = $MediaItem$RequestMetadata$Type();
  static final _id_EMPTY = _class.staticFieldId(
    r'EMPTY',
    r'Landroidx/media3/common/MediaItem$RequestMetadata;',
  );

  /// from: `static public final androidx.media3.common.MediaItem$RequestMetadata EMPTY`
  /// The returned object must be released after use, by calling the [release] method.
  static MediaItem$RequestMetadata? get EMPTY =>
      _id_EMPTY.get(_class, const $MediaItem$RequestMetadata$NullableType());

  static final _id_mediaUri = _class.instanceFieldId(
    r'mediaUri',
    r'Landroid/net/Uri;',
  );

  /// from: `public final android.net.Uri mediaUri`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get mediaUri =>
      _id_mediaUri.get(this, const jni$_.JObjectNullableType());

  static final _id_searchQuery = _class.instanceFieldId(
    r'searchQuery',
    r'Ljava/lang/String;',
  );

  /// from: `public final java.lang.String searchQuery`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? get searchQuery =>
      _id_searchQuery.get(this, const jni$_.JStringNullableType());

  static final _id_extras = _class.instanceFieldId(
    r'extras',
    r'Landroid/os/Bundle;',
  );

  /// from: `public final android.os.Bundle extras`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get extras =>
      _id_extras.get(this, const jni$_.JObjectNullableType());

  static final _id_buildUpon = _class.instanceMethodId(
    r'buildUpon',
    r'()Landroidx/media3/common/MediaItem$RequestMetadata$Builder;',
  );

  static final _buildUpon = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public androidx.media3.common.MediaItem$RequestMetadata$Builder buildUpon()`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$RequestMetadata$Builder? buildUpon() {
    return _buildUpon(reference.pointer, _id_buildUpon as jni$_.JMethodIDPtr)
        .object<MediaItem$RequestMetadata$Builder?>(
            const $MediaItem$RequestMetadata$Builder$NullableType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr,
            _$object.pointer)
        .boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_toBundle = _class.instanceMethodId(
    r'toBundle',
    r'()Landroid/os/Bundle;',
  );

  static final _toBundle = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.os.Bundle toBundle()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? toBundle() {
    return _toBundle(reference.pointer, _id_toBundle as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_fromBundle = _class.staticMethodId(
    r'fromBundle',
    r'(Landroid/os/Bundle;)Landroidx/media3/common/MediaItem$RequestMetadata;',
  );

  static final _fromBundle = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public androidx.media3.common.MediaItem$RequestMetadata fromBundle(android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  static MediaItem$RequestMetadata? fromBundle(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _fromBundle(_class.reference.pointer,
            _id_fromBundle as jni$_.JMethodIDPtr, _$bundle.pointer)
        .object<MediaItem$RequestMetadata?>(
            const $MediaItem$RequestMetadata$NullableType());
  }
}

final class $MediaItem$RequestMetadata$NullableType
    extends jni$_.JObjType<MediaItem$RequestMetadata?> {
  @jni$_.internal
  const $MediaItem$RequestMetadata$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$RequestMetadata;';

  @jni$_.internal
  @core$_.override
  MediaItem$RequestMetadata? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : MediaItem$RequestMetadata.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$RequestMetadata?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$RequestMetadata$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$RequestMetadata$NullableType) &&
        other is $MediaItem$RequestMetadata$NullableType;
  }
}

final class $MediaItem$RequestMetadata$Type
    extends jni$_.JObjType<MediaItem$RequestMetadata> {
  @jni$_.internal
  const $MediaItem$RequestMetadata$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$RequestMetadata;';

  @jni$_.internal
  @core$_.override
  MediaItem$RequestMetadata fromReference(jni$_.JReference reference) =>
      MediaItem$RequestMetadata.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$RequestMetadata?> get nullableType =>
      const $MediaItem$RequestMetadata$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$RequestMetadata$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$RequestMetadata$Type) &&
        other is $MediaItem$RequestMetadata$Type;
  }
}

/// from: `androidx.media3.common.MediaItem$Subtitle`
class MediaItem$Subtitle extends MediaItem$SubtitleConfiguration {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaItem$Subtitle> $type;

  @jni$_.internal
  MediaItem$Subtitle.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'androidx/media3/common/MediaItem$Subtitle');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MediaItem$Subtitle$NullableType();
  static const type = $MediaItem$Subtitle$Type();
  static final _id_new$ = _class.constructorId(
    r'(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(android.net.Uri uri, java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaItem$Subtitle(
    jni$_.JObject? uri,
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return MediaItem$Subtitle.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr,
            _$uri.pointer,
            _$string.pointer,
            _$string1.pointer)
        .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;I)V',
  );

  static final _new$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int)>();

  /// from: `public void <init>(android.net.Uri uri, java.lang.String string, java.lang.String string1, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaItem$Subtitle.new$1(
    jni$_.JObject? uri,
    jni$_.JString? string,
    jni$_.JString? string1,
    int i,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return MediaItem$Subtitle.fromReference(_new$1(
            _class.reference.pointer,
            _id_new$1 as jni$_.JMethodIDPtr,
            _$uri.pointer,
            _$string.pointer,
            _$string1.pointer,
            i)
        .reference);
  }

  static final _id_new$2 = _class.constructorId(
    r'(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;)V',
  );

  static final _new$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(android.net.Uri uri, java.lang.String string, java.lang.String string1, int i, int i1, java.lang.String string2)`
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaItem$Subtitle.new$2(
    jni$_.JObject? uri,
    jni$_.JString? string,
    jni$_.JString? string1,
    int i,
    int i1,
    jni$_.JString? string2,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$string2 = string2?.reference ?? jni$_.jNullReference;
    return MediaItem$Subtitle.fromReference(_new$2(
            _class.reference.pointer,
            _id_new$2 as jni$_.JMethodIDPtr,
            _$uri.pointer,
            _$string.pointer,
            _$string1.pointer,
            i,
            i1,
            _$string2.pointer)
        .reference);
  }
}

final class $MediaItem$Subtitle$NullableType
    extends jni$_.JObjType<MediaItem$Subtitle?> {
  @jni$_.internal
  const $MediaItem$Subtitle$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$Subtitle;';

  @jni$_.internal
  @core$_.override
  MediaItem$Subtitle? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : MediaItem$Subtitle.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType =>
      const $MediaItem$SubtitleConfiguration$NullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$Subtitle?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($MediaItem$Subtitle$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$Subtitle$NullableType) &&
        other is $MediaItem$Subtitle$NullableType;
  }
}

final class $MediaItem$Subtitle$Type
    extends jni$_.JObjType<MediaItem$Subtitle> {
  @jni$_.internal
  const $MediaItem$Subtitle$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$Subtitle;';

  @jni$_.internal
  @core$_.override
  MediaItem$Subtitle fromReference(jni$_.JReference reference) =>
      MediaItem$Subtitle.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType =>
      const $MediaItem$SubtitleConfiguration$NullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$Subtitle?> get nullableType =>
      const $MediaItem$Subtitle$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($MediaItem$Subtitle$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$Subtitle$Type) &&
        other is $MediaItem$Subtitle$Type;
  }
}

/// from: `androidx.media3.common.MediaItem$SubtitleConfiguration$Builder`
class MediaItem$SubtitleConfiguration$Builder extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaItem$SubtitleConfiguration$Builder> $type;

  @jni$_.internal
  MediaItem$SubtitleConfiguration$Builder.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/media3/common/MediaItem$SubtitleConfiguration$Builder');

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $MediaItem$SubtitleConfiguration$Builder$NullableType();
  static const type = $MediaItem$SubtitleConfiguration$Builder$Type();
  static final _id_new$ = _class.constructorId(
    r'(Landroid/net/Uri;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaItem$SubtitleConfiguration$Builder(
    jni$_.JObject? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return MediaItem$SubtitleConfiguration$Builder.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr,
            _$uri.pointer)
        .reference);
  }

  static final _id_setUri = _class.instanceMethodId(
    r'setUri',
    r'(Landroid/net/Uri;)Landroidx/media3/common/MediaItem$SubtitleConfiguration$Builder;',
  );

  static final _setUri = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$SubtitleConfiguration$Builder setUri(android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$SubtitleConfiguration$Builder? setUri(
    jni$_.JObject? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _setUri(
            reference.pointer, _id_setUri as jni$_.JMethodIDPtr, _$uri.pointer)
        .object<MediaItem$SubtitleConfiguration$Builder?>(
            const $MediaItem$SubtitleConfiguration$Builder$NullableType());
  }

  static final _id_setMimeType = _class.instanceMethodId(
    r'setMimeType',
    r'(Ljava/lang/String;)Landroidx/media3/common/MediaItem$SubtitleConfiguration$Builder;',
  );

  static final _setMimeType = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$SubtitleConfiguration$Builder setMimeType(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$SubtitleConfiguration$Builder? setMimeType(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setMimeType(reference.pointer,
            _id_setMimeType as jni$_.JMethodIDPtr, _$string.pointer)
        .object<MediaItem$SubtitleConfiguration$Builder?>(
            const $MediaItem$SubtitleConfiguration$Builder$NullableType());
  }

  static final _id_setLanguage = _class.instanceMethodId(
    r'setLanguage',
    r'(Ljava/lang/String;)Landroidx/media3/common/MediaItem$SubtitleConfiguration$Builder;',
  );

  static final _setLanguage = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$SubtitleConfiguration$Builder setLanguage(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$SubtitleConfiguration$Builder? setLanguage(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setLanguage(reference.pointer,
            _id_setLanguage as jni$_.JMethodIDPtr, _$string.pointer)
        .object<MediaItem$SubtitleConfiguration$Builder?>(
            const $MediaItem$SubtitleConfiguration$Builder$NullableType());
  }

  static final _id_setSelectionFlags = _class.instanceMethodId(
    r'setSelectionFlags',
    r'(I)Landroidx/media3/common/MediaItem$SubtitleConfiguration$Builder;',
  );

  static final _setSelectionFlags = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$SubtitleConfiguration$Builder setSelectionFlags(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$SubtitleConfiguration$Builder? setSelectionFlags(
    int i,
  ) {
    return _setSelectionFlags(
            reference.pointer, _id_setSelectionFlags as jni$_.JMethodIDPtr, i)
        .object<MediaItem$SubtitleConfiguration$Builder?>(
            const $MediaItem$SubtitleConfiguration$Builder$NullableType());
  }

  static final _id_setRoleFlags = _class.instanceMethodId(
    r'setRoleFlags',
    r'(I)Landroidx/media3/common/MediaItem$SubtitleConfiguration$Builder;',
  );

  static final _setRoleFlags = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$SubtitleConfiguration$Builder setRoleFlags(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$SubtitleConfiguration$Builder? setRoleFlags(
    int i,
  ) {
    return _setRoleFlags(
            reference.pointer, _id_setRoleFlags as jni$_.JMethodIDPtr, i)
        .object<MediaItem$SubtitleConfiguration$Builder?>(
            const $MediaItem$SubtitleConfiguration$Builder$NullableType());
  }

  static final _id_setLabel = _class.instanceMethodId(
    r'setLabel',
    r'(Ljava/lang/String;)Landroidx/media3/common/MediaItem$SubtitleConfiguration$Builder;',
  );

  static final _setLabel = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$SubtitleConfiguration$Builder setLabel(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$SubtitleConfiguration$Builder? setLabel(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setLabel(reference.pointer, _id_setLabel as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<MediaItem$SubtitleConfiguration$Builder?>(
            const $MediaItem$SubtitleConfiguration$Builder$NullableType());
  }

  static final _id_setId = _class.instanceMethodId(
    r'setId',
    r'(Ljava/lang/String;)Landroidx/media3/common/MediaItem$SubtitleConfiguration$Builder;',
  );

  static final _setId = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public androidx.media3.common.MediaItem$SubtitleConfiguration$Builder setId(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$SubtitleConfiguration$Builder? setId(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setId(reference.pointer, _id_setId as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<MediaItem$SubtitleConfiguration$Builder?>(
            const $MediaItem$SubtitleConfiguration$Builder$NullableType());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Landroidx/media3/common/MediaItem$SubtitleConfiguration;',
  );

  static final _build = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public androidx.media3.common.MediaItem$SubtitleConfiguration build()`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$SubtitleConfiguration? build() {
    return _build(reference.pointer, _id_build as jni$_.JMethodIDPtr)
        .object<MediaItem$SubtitleConfiguration?>(
            const $MediaItem$SubtitleConfiguration$NullableType());
  }
}

final class $MediaItem$SubtitleConfiguration$Builder$NullableType
    extends jni$_.JObjType<MediaItem$SubtitleConfiguration$Builder?> {
  @jni$_.internal
  const $MediaItem$SubtitleConfiguration$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/media3/common/MediaItem$SubtitleConfiguration$Builder;';

  @jni$_.internal
  @core$_.override
  MediaItem$SubtitleConfiguration$Builder? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : MediaItem$SubtitleConfiguration$Builder.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$SubtitleConfiguration$Builder?> get nullableType =>
      this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($MediaItem$SubtitleConfiguration$Builder$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($MediaItem$SubtitleConfiguration$Builder$NullableType) &&
        other is $MediaItem$SubtitleConfiguration$Builder$NullableType;
  }
}

final class $MediaItem$SubtitleConfiguration$Builder$Type
    extends jni$_.JObjType<MediaItem$SubtitleConfiguration$Builder> {
  @jni$_.internal
  const $MediaItem$SubtitleConfiguration$Builder$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/media3/common/MediaItem$SubtitleConfiguration$Builder;';

  @jni$_.internal
  @core$_.override
  MediaItem$SubtitleConfiguration$Builder fromReference(
          jni$_.JReference reference) =>
      MediaItem$SubtitleConfiguration$Builder.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$SubtitleConfiguration$Builder?> get nullableType =>
      const $MediaItem$SubtitleConfiguration$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$SubtitleConfiguration$Builder$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($MediaItem$SubtitleConfiguration$Builder$Type) &&
        other is $MediaItem$SubtitleConfiguration$Builder$Type;
  }
}

/// from: `androidx.media3.common.MediaItem$SubtitleConfiguration`
class MediaItem$SubtitleConfiguration extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaItem$SubtitleConfiguration> $type;

  @jni$_.internal
  MediaItem$SubtitleConfiguration.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/media3/common/MediaItem$SubtitleConfiguration');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MediaItem$SubtitleConfiguration$NullableType();
  static const type = $MediaItem$SubtitleConfiguration$Type();
  static final _id_uri = _class.instanceFieldId(
    r'uri',
    r'Landroid/net/Uri;',
  );

  /// from: `public final android.net.Uri uri`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get uri =>
      _id_uri.get(this, const jni$_.JObjectNullableType());

  static final _id_mimeType = _class.instanceFieldId(
    r'mimeType',
    r'Ljava/lang/String;',
  );

  /// from: `public final java.lang.String mimeType`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? get mimeType =>
      _id_mimeType.get(this, const jni$_.JStringNullableType());

  static final _id_language = _class.instanceFieldId(
    r'language',
    r'Ljava/lang/String;',
  );

  /// from: `public final java.lang.String language`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? get language =>
      _id_language.get(this, const jni$_.JStringNullableType());

  static final _id_selectionFlags = _class.instanceFieldId(
    r'selectionFlags',
    r'I',
  );

  /// from: `public final int selectionFlags`
  int get selectionFlags =>
      _id_selectionFlags.get(this, const jni$_.jintType());

  static final _id_roleFlags = _class.instanceFieldId(
    r'roleFlags',
    r'I',
  );

  /// from: `public final int roleFlags`
  int get roleFlags => _id_roleFlags.get(this, const jni$_.jintType());

  static final _id_label = _class.instanceFieldId(
    r'label',
    r'Ljava/lang/String;',
  );

  /// from: `public final java.lang.String label`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? get label =>
      _id_label.get(this, const jni$_.JStringNullableType());

  static final _id_id = _class.instanceFieldId(
    r'id',
    r'Ljava/lang/String;',
  );

  /// from: `public final java.lang.String id`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? get id => _id_id.get(this, const jni$_.JStringNullableType());

  static final _id_buildUpon = _class.instanceMethodId(
    r'buildUpon',
    r'()Landroidx/media3/common/MediaItem$SubtitleConfiguration$Builder;',
  );

  static final _buildUpon = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public androidx.media3.common.MediaItem$SubtitleConfiguration$Builder buildUpon()`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$SubtitleConfiguration$Builder? buildUpon() {
    return _buildUpon(reference.pointer, _id_buildUpon as jni$_.JMethodIDPtr)
        .object<MediaItem$SubtitleConfiguration$Builder?>(
            const $MediaItem$SubtitleConfiguration$Builder$NullableType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr,
            _$object.pointer)
        .boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_fromBundle = _class.staticMethodId(
    r'fromBundle',
    r'(Landroid/os/Bundle;)Landroidx/media3/common/MediaItem$SubtitleConfiguration;',
  );

  static final _fromBundle = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public androidx.media3.common.MediaItem$SubtitleConfiguration fromBundle(android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  static MediaItem$SubtitleConfiguration? fromBundle(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _fromBundle(_class.reference.pointer,
            _id_fromBundle as jni$_.JMethodIDPtr, _$bundle.pointer)
        .object<MediaItem$SubtitleConfiguration?>(
            const $MediaItem$SubtitleConfiguration$NullableType());
  }

  static final _id_toBundle = _class.instanceMethodId(
    r'toBundle',
    r'()Landroid/os/Bundle;',
  );

  static final _toBundle = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.os.Bundle toBundle()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? toBundle() {
    return _toBundle(reference.pointer, _id_toBundle as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }
}

final class $MediaItem$SubtitleConfiguration$NullableType
    extends jni$_.JObjType<MediaItem$SubtitleConfiguration?> {
  @jni$_.internal
  const $MediaItem$SubtitleConfiguration$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/media3/common/MediaItem$SubtitleConfiguration;';

  @jni$_.internal
  @core$_.override
  MediaItem$SubtitleConfiguration? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : MediaItem$SubtitleConfiguration.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$SubtitleConfiguration?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$SubtitleConfiguration$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($MediaItem$SubtitleConfiguration$NullableType) &&
        other is $MediaItem$SubtitleConfiguration$NullableType;
  }
}

final class $MediaItem$SubtitleConfiguration$Type
    extends jni$_.JObjType<MediaItem$SubtitleConfiguration> {
  @jni$_.internal
  const $MediaItem$SubtitleConfiguration$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/media3/common/MediaItem$SubtitleConfiguration;';

  @jni$_.internal
  @core$_.override
  MediaItem$SubtitleConfiguration fromReference(jni$_.JReference reference) =>
      MediaItem$SubtitleConfiguration.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$SubtitleConfiguration?> get nullableType =>
      const $MediaItem$SubtitleConfiguration$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$SubtitleConfiguration$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$SubtitleConfiguration$Type) &&
        other is $MediaItem$SubtitleConfiguration$Type;
  }
}

/// from: `androidx.media3.common.MediaItem`
class MediaItem extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaItem> $type;

  @jni$_.internal
  MediaItem.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'androidx/media3/common/MediaItem');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MediaItem$NullableType();
  static const type = $MediaItem$Type();
  static final _id_DEFAULT_MEDIA_ID = _class.staticFieldId(
    r'DEFAULT_MEDIA_ID',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DEFAULT_MEDIA_ID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DEFAULT_MEDIA_ID =>
      _id_DEFAULT_MEDIA_ID.get(_class, const jni$_.JStringNullableType());

  static final _id_EMPTY = _class.staticFieldId(
    r'EMPTY',
    r'Landroidx/media3/common/MediaItem;',
  );

  /// from: `static public final androidx.media3.common.MediaItem EMPTY`
  /// The returned object must be released after use, by calling the [release] method.
  static MediaItem? get EMPTY =>
      _id_EMPTY.get(_class, const $MediaItem$NullableType());

  static final _id_mediaId = _class.instanceFieldId(
    r'mediaId',
    r'Ljava/lang/String;',
  );

  /// from: `public final java.lang.String mediaId`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? get mediaId =>
      _id_mediaId.get(this, const jni$_.JStringNullableType());

  static final _id_localConfiguration = _class.instanceFieldId(
    r'localConfiguration',
    r'Landroidx/media3/common/MediaItem$LocalConfiguration;',
  );

  /// from: `public final androidx.media3.common.MediaItem$LocalConfiguration localConfiguration`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$LocalConfiguration? get localConfiguration => _id_localConfiguration
      .get(this, const $MediaItem$LocalConfiguration$NullableType());

  static final _id_playbackProperties = _class.instanceFieldId(
    r'playbackProperties',
    r'Landroidx/media3/common/MediaItem$LocalConfiguration;',
  );

  /// from: `public final androidx.media3.common.MediaItem$LocalConfiguration playbackProperties`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$LocalConfiguration? get playbackProperties => _id_playbackProperties
      .get(this, const $MediaItem$LocalConfiguration$NullableType());

  static final _id_liveConfiguration = _class.instanceFieldId(
    r'liveConfiguration',
    r'Landroidx/media3/common/MediaItem$LiveConfiguration;',
  );

  /// from: `public final androidx.media3.common.MediaItem$LiveConfiguration liveConfiguration`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$LiveConfiguration? get liveConfiguration => _id_liveConfiguration
      .get(this, const $MediaItem$LiveConfiguration$NullableType());

  static final _id_mediaMetadata = _class.instanceFieldId(
    r'mediaMetadata',
    r'Landroidx/media3/common/MediaMetadata;',
  );

  /// from: `public final androidx.media3.common.MediaMetadata mediaMetadata`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get mediaMetadata =>
      _id_mediaMetadata.get(this, const jni$_.JObjectNullableType());

  static final _id_clippingConfiguration = _class.instanceFieldId(
    r'clippingConfiguration',
    r'Landroidx/media3/common/MediaItem$ClippingConfiguration;',
  );

  /// from: `public final androidx.media3.common.MediaItem$ClippingConfiguration clippingConfiguration`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$ClippingConfiguration? get clippingConfiguration =>
      _id_clippingConfiguration.get(
          this, const $MediaItem$ClippingConfiguration$NullableType());

  static final _id_clippingProperties = _class.instanceFieldId(
    r'clippingProperties',
    r'Landroidx/media3/common/MediaItem$ClippingProperties;',
  );

  /// from: `public final androidx.media3.common.MediaItem$ClippingProperties clippingProperties`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$ClippingProperties? get clippingProperties => _id_clippingProperties
      .get(this, const $MediaItem$ClippingProperties$NullableType());

  static final _id_requestMetadata = _class.instanceFieldId(
    r'requestMetadata',
    r'Landroidx/media3/common/MediaItem$RequestMetadata;',
  );

  /// from: `public final androidx.media3.common.MediaItem$RequestMetadata requestMetadata`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$RequestMetadata? get requestMetadata => _id_requestMetadata.get(
      this, const $MediaItem$RequestMetadata$NullableType());

  static final _id_fromUri = _class.staticMethodId(
    r'fromUri',
    r'(Ljava/lang/String;)Landroidx/media3/common/MediaItem;',
  );

  static final _fromUri = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public androidx.media3.common.MediaItem fromUri(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static MediaItem? fromUri(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _fromUri(_class.reference.pointer, _id_fromUri as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<MediaItem?>(const $MediaItem$NullableType());
  }

  static final _id_fromUri$1 = _class.staticMethodId(
    r'fromUri',
    r'(Landroid/net/Uri;)Landroidx/media3/common/MediaItem;',
  );

  static final _fromUri$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public androidx.media3.common.MediaItem fromUri(android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  static MediaItem? fromUri$1(
    jni$_.JObject? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _fromUri$1(_class.reference.pointer,
            _id_fromUri$1 as jni$_.JMethodIDPtr, _$uri.pointer)
        .object<MediaItem?>(const $MediaItem$NullableType());
  }

  static final _id_buildUpon = _class.instanceMethodId(
    r'buildUpon',
    r'()Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _buildUpon = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public androidx.media3.common.MediaItem$Builder buildUpon()`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? buildUpon() {
    return _buildUpon(reference.pointer, _id_buildUpon as jni$_.JMethodIDPtr)
        .object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr,
            _$object.pointer)
        .boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_toBundle = _class.instanceMethodId(
    r'toBundle',
    r'()Landroid/os/Bundle;',
  );

  static final _toBundle = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.os.Bundle toBundle()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? toBundle() {
    return _toBundle(reference.pointer, _id_toBundle as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_toBundleIncludeLocalConfiguration = _class.instanceMethodId(
    r'toBundleIncludeLocalConfiguration',
    r'()Landroid/os/Bundle;',
  );

  static final _toBundleIncludeLocalConfiguration =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public android.os.Bundle toBundleIncludeLocalConfiguration()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? toBundleIncludeLocalConfiguration() {
    return _toBundleIncludeLocalConfiguration(reference.pointer,
            _id_toBundleIncludeLocalConfiguration as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_fromBundle = _class.staticMethodId(
    r'fromBundle',
    r'(Landroid/os/Bundle;)Landroidx/media3/common/MediaItem;',
  );

  static final _fromBundle = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public androidx.media3.common.MediaItem fromBundle(android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  static MediaItem? fromBundle(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _fromBundle(_class.reference.pointer,
            _id_fromBundle as jni$_.JMethodIDPtr, _$bundle.pointer)
        .object<MediaItem?>(const $MediaItem$NullableType());
  }
}

final class $MediaItem$NullableType extends jni$_.JObjType<MediaItem?> {
  @jni$_.internal
  const $MediaItem$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem;';

  @jni$_.internal
  @core$_.override
  MediaItem? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : MediaItem.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$NullableType) &&
        other is $MediaItem$NullableType;
  }
}

final class $MediaItem$Type extends jni$_.JObjType<MediaItem> {
  @jni$_.internal
  const $MediaItem$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem;';

  @jni$_.internal
  @core$_.override
  MediaItem fromReference(jni$_.JReference reference) =>
      MediaItem.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem?> get nullableType =>
      const $MediaItem$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$Type) && other is $MediaItem$Type;
  }
}

/// from: `com.anandnet.audio_player_jni.AudioPlayerJni`
class AudioPlayerJni extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<AudioPlayerJni> $type;

  @jni$_.internal
  AudioPlayerJni.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'com/anandnet/audio_player_jni/AudioPlayerJni');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $AudioPlayerJni$NullableType();
  static const type = $AudioPlayerJni$Type();
  static final _id_new$ = _class.constructorId(
    r'(Landroid/content/Context;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  factory AudioPlayerJni(
    jni$_.JObject context,
  ) {
    final _$context = context.reference;
    return AudioPlayerJni.fromReference(_new$(_class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr, _$context.pointer)
        .reference);
  }

  static final _id_getCurrentState = _class.instanceMethodId(
    r'getCurrentState',
    r'()I',
  );

  static final _getCurrentState = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final int getCurrentState()`
  int getCurrentState() {
    return _getCurrentState(
            reference.pointer, _id_getCurrentState as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getCurrentError = _class.instanceMethodId(
    r'getCurrentError',
    r'()Ljava/lang/String;',
  );

  static final _getCurrentError = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.lang.String getCurrentError()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getCurrentError() {
    return _getCurrentError(
            reference.pointer, _id_getCurrentError as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getCurrentPosition = _class.instanceMethodId(
    r'getCurrentPosition',
    r'()J',
  );

  static final _getCurrentPosition = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final long getCurrentPosition()`
  int getCurrentPosition() {
    return _getCurrentPosition(
            reference.pointer, _id_getCurrentPosition as jni$_.JMethodIDPtr)
        .long;
  }

  static final _id_getDuration = _class.instanceMethodId(
    r'getDuration',
    r'()J',
  );

  static final _getDuration = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final long getDuration()`
  int getDuration() {
    return _getDuration(
            reference.pointer, _id_getDuration as jni$_.JMethodIDPtr)
        .long;
  }

  static final _id_getBufferedPosition = _class.instanceMethodId(
    r'getBufferedPosition',
    r'()J',
  );

  static final _getBufferedPosition = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final long getBufferedPosition()`
  int getBufferedPosition() {
    return _getBufferedPosition(
            reference.pointer, _id_getBufferedPosition as jni$_.JMethodIDPtr)
        .long;
  }

  static final _id_getAllStates = _class.instanceMethodId(
    r'getAllStates',
    r'()Ljava/lang/String;',
  );

  static final _getAllStates = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.lang.String getAllStates()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getAllStates() {
    return _getAllStates(
            reference.pointer, _id_getAllStates as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_setUrl = _class.instanceMethodId(
    r'setUrl',
    r'(Ljava/lang/String;Z)V',
  );

  static final _setUrl = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public final void setUrl(java.lang.String string, boolean z)`
  void setUrl(
    jni$_.JString string,
    bool z,
  ) {
    final _$string = string.reference;
    _setUrl(reference.pointer, _id_setUrl as jni$_.JMethodIDPtr,
            _$string.pointer, z ? 1 : 0)
        .check();
  }

  static final _id_addMediaItem = _class.instanceMethodId(
    r'addMediaItem',
    r'(Landroidx/media3/common/MediaItem;Ljava/lang/Integer;)V',
  );

  static final _addMediaItem = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void addMediaItem(androidx.media3.common.MediaItem mediaItem, java.lang.Integer integer)`
  void addMediaItem(
    MediaItem mediaItem,
    jni$_.JInteger? integer,
  ) {
    final _$mediaItem = mediaItem.reference;
    final _$integer = integer?.reference ?? jni$_.jNullReference;
    _addMediaItem(reference.pointer, _id_addMediaItem as jni$_.JMethodIDPtr,
            _$mediaItem.pointer, _$integer.pointer)
        .check();
  }

  static final _id_addMediaItems = _class.instanceMethodId(
    r'addMediaItems',
    r'(Ljava/util/List;Ljava/lang/Integer;)V',
  );

  static final _addMediaItems = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void addMediaItems(java.util.List list, java.lang.Integer integer)`
  void addMediaItems(
    jni$_.JList<MediaItem> list,
    jni$_.JInteger? integer,
  ) {
    final _$list = list.reference;
    final _$integer = integer?.reference ?? jni$_.jNullReference;
    _addMediaItems(reference.pointer, _id_addMediaItems as jni$_.JMethodIDPtr,
            _$list.pointer, _$integer.pointer)
        .check();
  }

  static final _id_moveMediaItem = _class.instanceMethodId(
    r'moveMediaItem',
    r'(II)V',
  );

  static final _moveMediaItem = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Int32, jni$_.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int)>();

  /// from: `public final void moveMediaItem(int i, int i1)`
  void moveMediaItem(
    int i,
    int i1,
  ) {
    _moveMediaItem(
            reference.pointer, _id_moveMediaItem as jni$_.JMethodIDPtr, i, i1)
        .check();
  }

  static final _id_removeMediaItem = _class.instanceMethodId(
    r'removeMediaItem',
    r'(I)V',
  );

  static final _removeMediaItem = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void removeMediaItem(int i)`
  void removeMediaItem(
    int i,
  ) {
    _removeMediaItem(
            reference.pointer, _id_removeMediaItem as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_removeMediaItemRange = _class.instanceMethodId(
    r'removeMediaItemRange',
    r'(II)V',
  );

  static final _removeMediaItemRange = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Int32, jni$_.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int)>();

  /// from: `public final void removeMediaItemRange(int i, int i1)`
  void removeMediaItemRange(
    int i,
    int i1,
  ) {
    _removeMediaItemRange(reference.pointer,
            _id_removeMediaItemRange as jni$_.JMethodIDPtr, i, i1)
        .check();
  }

  static final _id_removeAllMediaItems = _class.instanceMethodId(
    r'removeAllMediaItems',
    r'()V',
  );

  static final _removeAllMediaItems = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final void removeAllMediaItems()`
  void removeAllMediaItems() {
    _removeAllMediaItems(
            reference.pointer, _id_removeAllMediaItems as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_getPlayList = _class.instanceMethodId(
    r'getPlayList',
    r'()Ljava/lang/String;',
  );

  static final _getPlayList = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.lang.String getPlayList()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString getPlayList() {
    return _getPlayList(
            reference.pointer, _id_getPlayList as jni$_.JMethodIDPtr)
        .object<jni$_.JString>(const jni$_.JStringType());
  }

  static final _id_play = _class.instanceMethodId(
    r'play',
    r'()V',
  );

  static final _play = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final void play()`
  void play() {
    _play(reference.pointer, _id_play as jni$_.JMethodIDPtr).check();
  }

  static final _id_retryPlay = _class.instanceMethodId(
    r'retryPlay',
    r'()V',
  );

  static final _retryPlay = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final void retryPlay()`
  void retryPlay() {
    _retryPlay(reference.pointer, _id_retryPlay as jni$_.JMethodIDPtr).check();
  }

  static final _id_playPause = _class.instanceMethodId(
    r'playPause',
    r'()V',
  );

  static final _playPause = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final void playPause()`
  void playPause() {
    _playPause(reference.pointer, _id_playPause as jni$_.JMethodIDPtr).check();
  }

  static final _id_pause = _class.instanceMethodId(
    r'pause',
    r'()V',
  );

  static final _pause = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final void pause()`
  void pause() {
    _pause(reference.pointer, _id_pause as jni$_.JMethodIDPtr).check();
  }

  static final _id_skipToPrevious = _class.instanceMethodId(
    r'skipToPrevious',
    r'()V',
  );

  static final _skipToPrevious = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final void skipToPrevious()`
  void skipToPrevious() {
    _skipToPrevious(reference.pointer, _id_skipToPrevious as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_skipToNext = _class.instanceMethodId(
    r'skipToNext',
    r'()V',
  );

  static final _skipToNext = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final void skipToNext()`
  void skipToNext() {
    _skipToNext(reference.pointer, _id_skipToNext as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_seekTo = _class.instanceMethodId(
    r'seekTo',
    r'(JLjava/lang/Integer;)V',
  );

  static final _seekTo = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int64, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void seekTo(long j, java.lang.Integer integer)`
  void seekTo(
    int j,
    jni$_.JInteger? integer,
  ) {
    final _$integer = integer?.reference ?? jni$_.jNullReference;
    _seekTo(reference.pointer, _id_seekTo as jni$_.JMethodIDPtr, j,
            _$integer.pointer)
        .check();
  }

  static final _id_toggleRepeatMode = _class.instanceMethodId(
    r'toggleRepeatMode',
    r'(I)V',
  );

  static final _toggleRepeatMode = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void toggleRepeatMode(int i)`
  void toggleRepeatMode(
    int i,
  ) {
    _toggleRepeatMode(
            reference.pointer, _id_toggleRepeatMode as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_getRepeatMode = _class.instanceMethodId(
    r'getRepeatMode',
    r'()I',
  );

  static final _getRepeatMode = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final int getRepeatMode()`
  int getRepeatMode() {
    return _getRepeatMode(
            reference.pointer, _id_getRepeatMode as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_toggleShuffleMode = _class.instanceMethodId(
    r'toggleShuffleMode',
    r'(Z)V',
  );

  static final _toggleShuffleMode = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void toggleShuffleMode(boolean z)`
  void toggleShuffleMode(
    bool z,
  ) {
    _toggleShuffleMode(reference.pointer,
            _id_toggleShuffleMode as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isShuffleModeEnabled = _class.instanceMethodId(
    r'isShuffleModeEnabled',
    r'()Z',
  );

  static final _isShuffleModeEnabled = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final boolean isShuffleModeEnabled()`
  bool isShuffleModeEnabled() {
    return _isShuffleModeEnabled(
            reference.pointer, _id_isShuffleModeEnabled as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_toggleSkipSilence = _class.instanceMethodId(
    r'toggleSkipSilence',
    r'(Z)V',
  );

  static final _toggleSkipSilence = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void toggleSkipSilence(boolean z)`
  void toggleSkipSilence(
    bool z,
  ) {
    _toggleSkipSilence(reference.pointer,
            _id_toggleSkipSilence as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isSkipSilenceEnabled = _class.instanceMethodId(
    r'isSkipSilenceEnabled',
    r'()Z',
  );

  static final _isSkipSilenceEnabled = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final boolean isSkipSilenceEnabled()`
  bool isSkipSilenceEnabled() {
    return _isSkipSilenceEnabled(
            reference.pointer, _id_isSkipSilenceEnabled as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_getPlayerSessionId = _class.instanceMethodId(
    r'getPlayerSessionId',
    r'()I',
  );

  static final _getPlayerSessionId = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final int getPlayerSessionId()`
  int getPlayerSessionId() {
    return _getPlayerSessionId(
            reference.pointer, _id_getPlayerSessionId as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_stop = _class.instanceMethodId(
    r'stop',
    r'()V',
  );

  static final _stop = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final void stop()`
  void stop() {
    _stop(reference.pointer, _id_stop as jni$_.JMethodIDPtr).check();
  }

  static final _id_release$1 = _class.instanceMethodId(
    r'release',
    r'()V',
  );

  static final _release$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final void release()`
  void release$1() {
    _release$1(reference.pointer, _id_release$1 as jni$_.JMethodIDPtr).check();
  }
}

final class $AudioPlayerJni$NullableType
    extends jni$_.JObjType<AudioPlayerJni?> {
  @jni$_.internal
  const $AudioPlayerJni$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lcom/anandnet/audio_player_jni/AudioPlayerJni;';

  @jni$_.internal
  @core$_.override
  AudioPlayerJni? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : AudioPlayerJni.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AudioPlayerJni?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AudioPlayerJni$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AudioPlayerJni$NullableType) &&
        other is $AudioPlayerJni$NullableType;
  }
}

final class $AudioPlayerJni$Type extends jni$_.JObjType<AudioPlayerJni> {
  @jni$_.internal
  const $AudioPlayerJni$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lcom/anandnet/audio_player_jni/AudioPlayerJni;';

  @jni$_.internal
  @core$_.override
  AudioPlayerJni fromReference(jni$_.JReference reference) =>
      AudioPlayerJni.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AudioPlayerJni?> get nullableType =>
      const $AudioPlayerJni$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AudioPlayerJni$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AudioPlayerJni$Type) &&
        other is $AudioPlayerJni$Type;
  }
}
